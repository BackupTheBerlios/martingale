/* WARANTY NOTICE AND COPYRIGHT
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

Copyright (C) Michael J. Meyer

matmjm@mindspring.com
spyqqqdia@yahoo.com

*/


/*
 * QuasiMonteCarlo.h
 *
 * Created on March 21, 2003, 12:45 PM
 */
 
 
#ifndef martingale_lowdiscrepancysequence_h    
#define martingale_lowdiscrepancysequence_h    

#include "Random.h"
#include "Utils.h"

MTGL_BEGIN_NAMESPACE(Martingale)


/*! \file QuasiMonteCarlo.h
 *  This file declares the basic interface to low discrepancy sequences and
 *  two implementations: Sobol and Niederreiter-Xing sequences. Dimension is 
 *  limited to 300 in the case of the Sobol generator and 20 in the case of the
 *  Niederreiter-Xing generator. The Sobol generator can very easily be extended
 *  to unlimited dimensions.
 */

/*******************************************************************************
 *
 *                     LOW DISCREPANCY SEQUENCE
 *
 ******************************************************************************/

/** <p>Interface and methods to compute points, quasinormal vectors and the 
 *  L2-discrepancy for low discrepancy sequences.</p>
 *
 * @author  Michael J. Meyer
 */
class LowDiscrepancySequence {
	
protected:
    
    int dim;           // dimension
    int index;         // index of current point in sequence
    
    Real* x;           // current uniform point
    Real* z;           // current quasi normal transform of x
	
public:
	
// ACCESSORS
	
	/** the dimension of the sequence 
	 */
	int getDimension(){ return dim; }
	
	/** empty default implementation */
	virtual void restart(){ };
	
	
// CONSTRUCTOR
    
    /** Constructor
     * @param d dimension
     */
    LowDiscrepancySequence(int d) :
	dim(d), 
	index(1), 
	x(new Real[dim]), 
	z(new Real[dim])
    {  }
	
	/** destructor */
	virtual ~LowDiscrepancySequence(){ }
    
    

// POINT GENERATION

    /** Returns the next point in the sequence.
     */
    virtual Real* nextPoint() = 0;
    
    /** <p>Writes the next point of the sequence into 
     *  the array r. Useful when discrepancy is computed.</p>
     */
    void writeNextPoint(Real* r)
    {
        Real* x=nextPoint();
        for(int k=0;k<dim;k++) r[k]=x[k];
    }
     
    
    
// L^2-DISCREPANCY 
	
 
     /** Helper function for \f$L^2\f$-discrepancy */
     // r[j][] is the jth point in the low discrepancy sequence
     Real product(int i, int j, Real** r)
     {
         Real f=1.0;
         for(int k=0;k<dim;k++)f*=(1.0-std::max<Real>(r[i][k],r[j][k]));
         return f;
     }
         
     
	 /** Helper function for \f$L^2\f$-discrepancy */
     // r[j][] is the jth point in the low discrepancy sequence
     Real product(int i, Real** r)
     {
         Real f=1.0;
         for(int k=0;k<dim;k++)f*=(1.0-r[i][k]);
         return f;
     }
     
     
	 /** Helper function for \f$L^2\f$-discrepancy */
     // r[j][] is the jth point in the low discrepancy sequence
     Real productSQ(int i, Real** r)
     {
         Real f=1.0;
         for(int k=0;k<dim;k++)f*=(1.0-r[i][k]*r[i][k]);
         return f;
     }  
    
    
    /** <p>The \f$L^2\f$-discrepancy of the first N points
     *  r[j][.], j=0,...,N-1.</p>
     *
     * @param N number of points.
     * @param r array of the first N points r[j][.], j=0,...,N-1.
     */    
     Real l2Discrepancy(int N, Real** r)
     {        
        // compute a=1/2^d, b=1/3^d
        Real a=1.0, b=1.0;
        for(int k=0;k<dim;k++){ a/=2; b/=3; }
        
        Real sum_1=0.0, sum_2=0.0;
        
        // report progress on main loop
        LoopStatus ls("Computing L^2-discrepancy.");
        int iteration=0, 
			iterations=N*(N-1)/2,     // number of iterations in following loop
			one_prcnt=iterations/100; // loop status reported every 1% completed
        
        // first sum over 1<=i<j<=N
        for(int i=0;i<N;i++)
        for(int j=i+1;j<N;j++)
        {
            sum_1+=product(i,j,r);

            // progress report, algorithm is of order N^2
            iteration++;
            if(iteration % one_prcnt == 0) ls.consoleReport(iteration,iterations); 
        }

        // first sum over 1<=i\neq j<=N
        sum_1*=2;
        
        // add in the terms for i=j
        for(int i=0;i<N;i++)sum_1+=product(i,r);
        
        sum_1/=(N*N);
        
        // second sum
        for(int i=0;i<N;i++)sum_2+=productSQ(i,r);
        sum_2/=N; sum_2*=(2*a);
        
        return sqrt(sum_1-sum_2+b);
     
     } // end L2-discrepancy
        
        
    /** <p>The \f$L^2\f$-discrepancy of the first N points. This
     *  computes the \f$L^2\f$-discrepancy \f$T_{N+1}\f$ of the first N+1 points 
     *  r[j][.], j=0,...,N from the discrepancy \f$x=T_N\f$ of the first N points
     *  based on the recursion followed by the quantities \f$h_N=(NT_N)^2/2\f$.</p> 
     *
     * <p>Use this method if the \f$L^2\f$-discrepancy is to be computed for all
     * n=1,2,3,... (number of points).</p>
     *
     * @param N number of points.
     * @param r array of the first N points r[j][], j=0,...,N of the sequence.
     * @param T_N discrepancy \f$T_N\f$.
     */
   
     Real l2Discrepancy(int N, Real** r, Real T_N)
     {
        
        // compute a=1/2^d, b=1/3^d
        Real a=1.0, b=1.0;
        for(int k=0;k<dim;k++){ a/=2.0; b/=3.0; }
               
        if(N==0){ Real two_h_1=product(0.0,r)-2.0*a*productSQ(0.0,r)+b;
                  return sqrt(two_h_1); }
        
        
        Real f=N*T_N,
               h_N=0.5*f*f,       
               h;             // h_{N+1}             

        // h=h_{N+1} from x=h_N
        h=h_N;
        for(int i=0;i<N;i++)h+=product(i,N,r);
        h+=0.5*product(N,r);
        
        Real sum=0.0;
        for(int i=0;i<N;i++)sum+=productSQ(i,r);
        sum+=(N+1)*productSQ(N,r);
        sum*=a;

        h-=sum;
        h+=(N+0.5)*b;
        
        return sqrt(2.0*h)/(N+1);
     
     } // end L2-discrepancy
     
     

// TRANSFORM UNIFORM -> MULTINORMAL

	 
     /** The transform of the next uniform point in the sequence to a
      *  quasinormal vector. Method of transform: coordinatewise inverse
      *  normal CDF.</p>
      *
      */
     Real* nextQuasiNormalVector()
     {
         Real* u=nextPoint();
         for(int k=0;k<dim;k++)z[k]=Random::nInverse(u[k]);
         return z;
     }


}; // end LowDiscrepancySequence



/*******************************************************************************
 *
 *                     NIEDERREITER-XING SEQUENCE
 *
 ******************************************************************************/


/** <p>Niederreiter-Xing low discrepancy sequence with basis b=2 in dimension 
 *  at most 20. Uses the Gray code counter and bitwise operations for very fast
 *  point generation.</p>
 *  
 *  <p>Use \f$N=2^n-1, n=1,2,\dots\f$  points for QMC integration.
 *  At \f$N=2^n-1\f$ the Gray code counter G(k) is in sync with the integer sequence
 *  \f$k=1,2,\dots\f$ again, that is \f$\{G(1),\dots,G(N)\}=\{1,\dots,N\}.</p>
 *
 *  <p>Contains the 
 *  <a href="http://www.dismat.oeaw.ac.at/pirs/niedxing.html"> 
 *  generator matrices</a> for dimensions j=4...20 in the array 
 *  gMC decoded from the row encoded form of the download and reencoded
 *  column by column for use with the Gray code counter method in the
 *  NX point generation.</p>
 *  
 *  <p>The columns of the binary matrices are encoded as a decimal integers 
 *  with the bits in each column forming the digits of the encoding modulo two. 
 *  The significance of the bits increases bottom up (the top bit is the most
 *  significant). This ordering of the bits is necessary for the fast point
 *  generation with the Gray code counter.</p>
 *
 * @author Michael J Meyer
 */
class NX : public LowDiscrepancySequence {
    
    static const int M=30;  // we are using 30 bit integers
    static const int N=1073741842;      // 2^30
    
    int* x_int;    // current vector of NX integers
    
    /** Array of generator matrices. These start at dimension
	 *  d=4, thus shift d->d-4 in generator matrix index. In each dimension
	 *  there is a sequence of binary generator matrices which are encoded 
	 *  column by column as decimal integers.
	 *
	 *  For any dimension dim set d=max(dim,4). Then genMats[d-4] is the encoding 
	 *  for the generator matrices C(j) for dimension dim and genMats[d-4][j] is 
	 *  the column encoding of the generator matrix C(j) for
     *  coordinate j in the current dimension: for 0<=k<M
     *  genMats[d-4][j][k] is the kth column col_k of C(j) encoded as a decimal 
     *  integer with binary digits the entries of col_k increasing in
     *  significance from the bottom up.
     */
    int*** genMats; 
	
	int d;  // max(dim,4), see above.
	
	
public:
	
	~NX()
	{ 
		delete[] x; delete[] z; delete[] x_int;
		for(int j=4;j<21;j++){
			for(int k=0;k<j;k++) delete[] genMats[j-4][k];
			delete[] genMats[j-4];
		}
		delete[] genMats;
	}
	
	// constructor at end of file, 


    
// THE NX POINTS
    

   void restart() 
   {
        index=1;
        // return the integer vector to the initial state
        for(int j=0;j<dim;j++)x_int[j]=genMats[d-4][j][0];
    }
    
    
    /** The next nx point in the unit cube [0,1]^dim.
     */
    Real* nextPoint() 
	{
        // find the position k of the rightmost zero bit of index
        // 0<=k<M
        int k=0, n=index;
        while(n%2==1){ n=n>>1; k++; }
        
        for(int j=0;j<dim;j++) { x_int[j]^=genMats[d-4][j][k];
        x[j]=((Real)x_int[j])/N; }
        
        index++;
        return x;
    }
    

// CONSTRUCTOR


    /** <p>NX low discrepancy sequence in dimension <code>dim</code>.</p>
     *
     * @param dim dimension of the sequence.
     */
    NX(int dim) :
	LowDiscrepancySequence(dim),
	x_int(new int[dim]),
	genMats(new int**[17]),
	d(max(dim,4))
	{   
        if(dim>20)
        {    
            std::cerr << "NX: dimension must be <= 20. Aborting.";
            exit(0);
        }
		
		// each Cj=genMats[j] is a j by 30 matrix, j=4,...,20
		for(int j=4;j<21;j++){
			
			genMats[j-4]=new int*[j];
			for(int k=0;k<j;k++) genMats[j-4][k]=new int[30];
		}
			
 
// generator matrices C_dim(j) for each coordinate j in all dimensions
// dim=4,5,...,20 encoded row by row.
    
/** gMR.................generator matrix rows.
 *  gMR[j][k] is the kth <i>row</i> of the generator matrix C(j)
 *  encoded as a decimal integer n by viewing the the sequence
 *  of zeros and ones in the row r_k=row_k(C(j)) as the digits of n
 *  in base 2 with the <i>most</i> significant digit being the first
 *  component of the row vector r_k.
 *  This is the download from the NX sequences site.
 */
    
// DIMENSION dim=4,  generator matrices column encodings:
		
int j=4;

int C_4[4][30]={
// C(0), columns:
{939524096,771751936,729808896,182452224,582483968,145620992,
573276160,143319040,35829760,8957440,539110272,134777568,
33694392,8423598,538976811,134744202,33686050,8421512,
2105378,526344,131586,32896,536879136,134219784,
33554946,8388736,2097184,524296,131074,32768},
// C(1), columns:
{1010580540,698984873,501358050,723004184,463969191,571187723,
132511770,185808928,465315712,573148032,127769215,195797171,
437911997,538968619,8386661,11745427,29107772,36276649,
127770082,195799832,437918631,538976779,8357861,11766547,
29203389,36413995,127535002,195038112,436214272,536879104},
// C(2), columns:
{757935405,151587081,835596750,582689467,53347118,34275851,
1007535090,722055824,842080028,539109675,3944946,2826896,
3277596,2097707,1069548493,699400889,823919405,573243913,
1009925134,723528459,838873650,536879136,16320,10672,
12572,8747,15410,11040,12800,8192},
// C(3), columns:
{469762048,721420288,230686720,162529280,823918592,573243392,
63815680,45723648,53287936,34155264,1007553984,722143664,
842150172,538976811,4178893,2732729,3219245,2238729,
3944910,2826939,3277614,2097675,1069548530,699400848,
823919388,573243947,1009925170,723528480,838873600,536879104}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_4[k][l];
j++;


// DIMENSION dim=5,  generator matrices column encodings:

int C_5[5][30]={

{713031680,1028653056,276430848,620052480,854321152,1063687424,
832587680,1045106516,468108990,593634153,455302564,588966884,
831404242,508908875,570011537,447011402,58925105,22147102,
711520267,1027043335,274395139,619589633,853889316,526625828,
556899090,450414731,61695349,22003374,711319143,1026803237},

{469762048,301989888,897581056,37748736,556793856,872939520,
43384832,558432256,339001344,370679808,924604416,51127296,
563352320,340279424,371599712,922817680,587236172,352338306,
377498053,390075586,934283841,55051268,565463810,341337217,
372011844,923021702,587340231,352404675,377528897,390090756},

{444180378,582771426,386103319,820878768,768469037,464323199,
540534784,147816993,431574890,613378415,440641348,585935378,
231724032,321626113,957130649,762735301,11922288,24841932,
431584074,613353990,440628151,585993112,231593821,321875383,
956409753,761948869,9300848,19861196,419525450,636044067},

{874725940,276345168,1005962939,404842328,44797378,390406220,
719975565,573261292,995508545,418874694,907865252,322234891,
226350248,200248046,996057078,201936327,719123621,922205246,
327333406,761281382,321461212,767251478,664019960,1027015197,
482492772,825457823,37181888,54617459,914535782,331364768},

{1010287484,387092183,210512716,885098740,230022349,551664607,
58382349,737801095,851645666,472257767,20236143,1039091209,
58775360,44000576,1061407804,1021417497,1044512992,686817112,
210706479,885241161,830590908,506889871,1048831907,677547034,
209243052,497930786,3673294,3045292,1006772076,389294580}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_5[k][l];
j++;


// DIMENSION dim=6,  generator matrices column encodings:

int C_6[6][30]={

{644587520,320281088,403904282,548421841,437785367,394981521,
506554803,530293121,648244152,185106849,11569178,557480225,
973123720,361462440,504459536,142843915,545798656,337900032,
1040972186,196311331,413671560,562725384,572041248,35752578,
2234536,139658,8728,556888961,973078562,898331042},

{685031084,856664270,430555838,298298601,984050532,453855559,
613834890,991631314,1068941538,74048175,151788468,813918083,
973205740,441353078,646982048,835775508,562397940,735494680,
129726984,352099622,830745068,555559847,2216356,5036425,
10885656,21140430,33858208,537335420,453587814,441440925},

{628217850,325454664,998314354,268731841,453835512,758493955,
558219927,493683099,988488409,366666052,736178184,809509177,
462094524,742319014,574824549,633529913,188824518,221007958,
560132781,96960952,818606902,554926544,52675512,80590561,
139458802,290959604,589418696,537223600,999014834,742375611},

{448749995,998890424,413198730,94371370,334225648,107954880,
955423729,849826956,143809279,92746299,191107394,559297372,
464313148,388043114,458511115,558604207,53072112,660938837,
995508297,349305116,810412340,538757973,2568240,4249692,
9384126,18320328,58841356,827833309,992673974,371872246},

{990132955,386692475,335605549,861087837,982651609,84928281,
6917107,513462859,927225443,147357176,230147361,580863685,
400855275,1050928175,593828120,332815393,779729968,513430758,
591690417,173375938,441512876,572594787,53330721,44572176,
63823260,35170609,51159688,719696755,445730208,84769844},

{499122176,447741952,925761536,176029696,962341888,302734336,
376373248,62016864,205310848,834126720,762654859,423141431,
399325739,730034628,911033337,334795476,777243070,197128747,
913256528,3945220,923566130,431370928,537112076,826011012,
764805349,994803843,602680533,293929560,443642261,284450072}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_6[k][l];
j++;


// DIMENSION dim=7,  generator matrices column encodings:

int C_7[7][30]={

{644587520,320281088,403904282,548421841,437785367,394981521,
506554803,530293121,648244152,185106849,11569178,557480225,
973123720,361462440,504459536,142843915,545798656,337900032,
1040972186,196311331,413671560,562725384,572041248,35752578,
2234536,139658,8728,556888961,973078562,898331042},

{685031084,856664270,430555838,298298601,984050532,453855559,
613834890,991631314,1068941538,74048175,151788468,813918083,
973205740,441353078,646982048,835775508,562397940,735494680,
129726984,352099622,830745068,555559847,2216356,5036425,
10885656,21140430,33858208,537335420,453587814,441440925},

{628217850,325454664,998314354,268731841,453835512,758493955,
558219927,493683099,988488409,366666052,736178184,809509177,
462094524,742319014,574824549,633529913,188824518,221007958,
560132781,96960952,818606902,554926544,52675512,80590561,
139458802,290959604,589418696,537223600,999014834,742375611},

{448749995,998890424,413198730,94371370,334225648,107954880,
955423729,849826956,143809279,92746299,191107394,559297372,
464313148,388043114,458511115,558604207,53072112,660938837,
995508297,349305116,810412340,538757973,2568240,4249692,
9384126,18320328,58841356,827833309,992673974,371872246},

{990132955,386692475,335605549,861087837,982651609,84928281,
6917107,513462859,927225443,147357176,230147361,580863685,
400855275,1050928175,593828120,332815393,779729968,513430758,
591690417,173375938,441512876,572594787,53330721,44572176,
63823260,35170609,51159688,719696755,445730208,84769844},

{499122176,447741952,925761536,176029696,962341888,302734336,
376373248,62016864,205310848,834126720,762654859,423141431,
399325739,730034628,911033337,334795476,777243070,197128747,
913256528,3945220,923566130,431370928,537112076,826011012,
764805349,994803843,602680533,293929560,443642261,284450072},

{394486004,974886838,170929084,939407551,831916941,1059229394,
328736998,51297358,557459938,178298032,143307296,901863802,
967646216,901529372,455215978,1069593776,999700512,925375062,
328241918,10271058,176291970,34081282,134219784,178954250,
142772744,167903914,134744194,896126085,958899621,1068804408}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_7[k][l];
j++;


// DIMENSION dim=8,  generator matrices column encodings:

int C_8[8][30]={

{760554632,893269568,1018726252,397550846,486706887,709025900,
691463814,897059424,771925038,48245314,445661732,365996202,
738733570,180388576,964722734,537575554,167816200,144706240,
723044396,895150218,771787264,48236704,137232522,142794760,
8924672,557792,448710830,500318210,747110536,180912136},

{191925899,850322866,184392687,549799844,1024443066,576347035,
382532166,16627116,182150555,475711155,390430684,312432314,
738311052,271793309,380782643,1020390196,815275293,540233864,
292597895,239456792,478389643,808653086,557457846,40619436,
129541521,246531490,821638469,472330680,978942525,1012590597},

{883717684,96518021,652853286,466291355,693221929,545287968,
966891722,388157465,457902881,1043440021,767486751,96647075,
1015198876,817049866,59417384,1020938648,805505024,537001984,
943048725,356580925,487641606,853040652,664254599,238742324,
399224619,780317982,208309733,119593013,994773809,1043440053},

{527160192,861192064,574201038,56565168,4568205,48833925,
95077866,255844538,189274428,503510557,792005641,294530466,
1024051984,853178650,1028795142,806055692,538444458,3240220,
35861445,17606958,478325819,817042729,567019160,48393984,
131186604,243438122,247019859,334236546,995232528,1043571127},

{966096851,159603416,391853503,534263005,567925083,754632580,
605300517,525481798,749929250,951300503,831759277,730950479,
90347043,911409212,381929330,911329204,459292567,581683098,
776501376,328445808,627119239,911278881,459320868,581640838,
848849327,746103428,695461275,185665125,882556987,411067682},

{592598110,477898738,153058420,620511864,746949233,214503603,
1035856176,135138758,748241599,948069951,742923334,312806868,
1040260755,351989255,286634848,439053624,592972212,44821798,
935742183,83151353,626597915,911288994,458790296,581632030,
848845844,746096664,881612722,840751721,266897418,974806028},

{814597320,726846282,153113138,530614223,894963566,209244070,
761266718,1027120870,391299851,447447865,651951006,624563529,
109126031,888852356,141706978,447434656,600454415,44812218,
658370173,830073561,506161194,348721804,695606583,241751322,
179316754,214663084,1035206920,128477917,884028701,405904022},

{212183505,575897462,674724232,907724773,335232225,249625608,
406679306,978524888,801158541,983070477,82256637,246020036,
111731374,885723697,756331345,445791144,601390858,43522354,
290858668,872585938,626715393,912326453,458692903,580025402,
842012457,751523504,529968469,738202308,884017946,405909655}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_8[k][l];
j++;


// DIMENSION dim=9,  generator matrices column encodings:

int C_9[9][30]={

{696344576,177875968,198830848,332466784,765128780,786752711,
700394490,710743797,80402060,582321570,531330516,600994053,
250343324,166325309,469206004,127787017,350209407,959505056,
402000190,101740930,58507941,533330381,53139563,235760460,
927807685,1048967523,1039779877,893524859,774165468,417325468},

{912973312,273086528,1043348344,304024545,144844181,373870990,
620509713,1032943564,953994563,579754739,988202473,136063485,
174254401,979221296,243294609,210750988,191980114,384136855,
119830278,960709408,152810196,87797445,725033016,935489600,
513691672,375388711,601961381,646256774,844711761,782078212},

{1070658743,541351219,177168414,857506082,954298862,189990685,
928237287,714563635,825097568,486326679,620190618,234665099,
969800906,10921771,117651574,960455758,712481989,104218246,
49191030,395016413,243053293,50889952,533282744,507581774,
365648082,362117277,943766598,452105566,134382757,600036003},

{468149054,356323242,531691055,533479845,369430665,1050335897,
855633172,121777424,926972951,861803436,633315042,147299592,
44904118,716540604,848053812,161692489,18786120,175446231,
329890245,289816975,992443882,144833905,280706725,393983156,
1024471095,244194217,705811717,343438231,1010252774,369916015},

{47463531,688500491,156046897,840884700,909106686,269785563,
239678700,930221356,503006993,979373410,786124814,22097096,
585759744,310525712,75113259,233079227,876226168,352865085,
796223239,120697769,233031239,848080728,960129683,786952936,
709641922,119053788,66120245,256432093,854840906,1062655013},

{823931987,369032796,955029757,104856506,770334010,240341623,
205772931,911259079,915206596,930217353,690026418,625901845,
48782362,390178869,852575964,836019537,694715425,89906349,
150902223,5834217,11009007,485593977,400623134,1069427788,
691791464,405765657,1019838073,551252580,986644545,225903139},

{382091319,739313283,942124987,288243186,229802861,751574681,
41151136,730405574,502619122,149340930,382496547,383277427,
951451155,587583426,191540436,308805631,1064908987,81380314,
127274604,62709513,46705551,1032153411,829062413,747188657,
444648745,199504873,237992630,378356548,772791966,833105476},

{587078599,203960422,511194114,755679438,139542925,28367724,
165315148,768111470,999912497,1027667728,638438543,359237201,
196888839,463057534,268847481,214959631,431660447,480659247,
337817622,224901951,151877581,263454068,928091576,989398959,
722566738,924770779,629317449,713695576,181619785,564028034},

{453809691,380853116,899434263,666973159,182611982,1008223646,
637955544,153759368,411114377,566828272,44056958,585359217,
34385615,801789890,507572939,48458184,992087037,411762415,
286362362,826271647,604665201,298685982,211695003,664079058,
265179510,352453822,1031228380,533517717,914087299,668725875}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_9[k][l];
j++;


// DIMENSION dim=10,  generator matrices column encodings:

int C_10[10][30]={

{696344576,177875968,198830848,332466784,765128780,786752711,
700394490,710743797,80402060,582321570,531330516,600994053,
250343324,166325309,469206004,127787017,350209407,959505056,
402000190,101740930,58507941,533330381,53139563,235760460,
927807685,1048967523,1039779877,893524859,774165468,417325468},

{912973312,273086528,1043348344,304024545,144844181,373870990,
620509713,1032943564,953994563,579754739,988202473,136063485,
174254401,979221296,243294609,210750988,191980114,384136855,
119830278,960709408,152810196,87797445,725033016,935489600,
513691672,375388711,601961381,646256774,844711761,782078212},

{1070658743,541351219,177168414,857506082,954298862,189990685,
928237287,714563635,825097568,486326679,620190618,234665099,
969800906,10921771,117651574,960455758,712481989,104218246,
49191030,395016413,243053293,50889952,533282744,507581774,
365648082,362117277,943766598,452105566,134382757,600036003},

{468149054,356323242,531691055,533479845,369430665,1050335897,
855633172,121777424,926972951,861803436,633315042,147299592,
44904118,716540604,848053812,161692489,18786120,175446231,
329890245,289816975,992443882,144833905,280706725,393983156,
1024471095,244194217,705811717,343438231,1010252774,369916015},

{47463531,688500491,156046897,840884700,909106686,269785563,
239678700,930221356,503006993,979373410,786124814,22097096,
585759744,310525712,75113259,233079227,876226168,352865085,
796223239,120697769,233031239,848080728,960129683,786952936,
709641922,119053788,66120245,256432093,854840906,1062655013},

{823931987,369032796,955029757,104856506,770334010,240341623,
205772931,911259079,915206596,930217353,690026418,625901845,
48782362,390178869,852575964,836019537,694715425,89906349,
150902223,5834217,11009007,485593977,400623134,1069427788,
691791464,405765657,1019838073,551252580,986644545,225903139},

{382091319,739313283,942124987,288243186,229802861,751574681,
41151136,730405574,502619122,149340930,382496547,383277427,
951451155,587583426,191540436,308805631,1064908987,81380314,
127274604,62709513,46705551,1032153411,829062413,747188657,
444648745,199504873,237992630,378356548,772791966,833105476},

{587078599,203960422,511194114,755679438,139542925,28367724,
165315148,768111470,999912497,1027667728,638438543,359237201,
196888839,463057534,268847481,214959631,431660447,480659247,
337817622,224901951,151877581,263454068,928091576,989398959,
722566738,924770779,629317449,713695576,181619785,564028034},

{453809691,380853116,899434263,666973159,182611982,1008223646,
637955544,153759368,411114377,566828272,44056958,585359217,
34385615,801789890,507572939,48458184,992087037,411762415,
286362362,826271647,604665201,298685982,211695003,664079058,
265179510,352453822,1031228380,533517717,914087299,668725875},

{931239939,828945438,363684192,95705596,248262652,526274471,
61950506,542401026,593450089,139006496,220316088,1019960300,
192398181,834630841,1072820851,474696622,1017601997,925673718,
774313960,12886932,8871591,362158636,293953661,573034866,
595008664,935547810,757597401,7383456,476631037,577177943}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_10[k][l];
j++;


// DIMENSION dim=11,  generator matrices column encodings:

int C_11[11][30]={

{640076413,38619923,880276074,258462862,218061951,110875386,
782095512,253820603,543879802,1050676528,655726172,1061996849,
738961624,599680434,1010784250,414752449,180264169,676013088,
361315153,950490779,626020133,142567564,521541876,618804908,
178037201,362432873,391430156,528491869,1063457085,141830450},

{393823488,967702564,996414134,380720145,300495822,884499191,
768736405,91406721,741603631,624224565,359456934,89283930,
537918092,829699217,349844160,264781100,1031472974,300442722,
219489904,623147931,359027908,503369389,414890524,46246130,
734200851,550896721,990511752,756780245,917175879,319155042},

{606494016,917965809,1018376187,163092929,747799491,115078791,
939997329,17414853,302426061,921867709,602154136,999186600,
411725464,223769413,703344350,841532862,797735996,1020553390,
1009041997,950379831,627636356,178720078,409380538,70557298,
673255255,835970611,286203702,266426382,560101456,39390863},

{600866816,685960568,103280453,309088841,955194087,1044309885,
605453218,957769029,348362389,812806796,302838834,313274906,
300197590,275279179,332855626,37604359,698428890,206208084,
238230667,367047777,4381534,735883523,1064951460,203911503,
78225905,998688573,340732841,941500948,201590684,371703833},

{346200071,734643499,123089088,649304842,605054314,790301134,
48561423,242319144,801905870,66727240,424813982,158270750,
162634162,146649881,731766097,380723582,33118141,861489947,
741323110,237146728,263233061,427681584,870037056,474509960,
337598642,712260834,886629205,541733652,450393070,280197089},

{986274698,148131086,870716920,447282332,1026196869,472749574,
32460871,272231963,410368694,178649215,888633116,1041483275,
940674463,931538664,956736924,524225383,936411974,969547861,
512648518,381104443,205372356,13905180,333072039,496115283,
546594229,1065067452,179675074,227185735,993747182,39536207},

{261598117,611550090,211615492,100722117,634969513,368972092,
686506470,533599043,530639277,873784702,575933634,411444686,
102047956,816671590,1010229544,185842073,978642477,562673342,
1003690264,941331870,814018105,637603710,143573597,1037408318,
307920125,339901701,832688107,722546136,412159266,769219252},

{922063332,565134652,82071906,769088394,944402391,138740959,
433429701,862296561,993983047,899835002,1037945714,417060381,
752393547,88184049,966044098,680894913,514682970,719476347,
886465807,486029512,62535029,555167353,307430836,709660495,
1041707699,786398307,825953853,750169210,221302275,595424191},

{512467929,300113655,674083661,689445985,148105911,866522716,
313630486,395717289,301814491,655585295,577555299,917231748,
888920033,927718938,724360554,377554296,248732447,174080875,
559178264,89877466,399554243,298097523,363683154,825448247,
854096856,766321194,215392664,646036130,1892589,311854397},

{986027855,132090846,621223411,333974992,790598050,79387364,
267995867,599454495,232907008,15913258,302191763,772790356,
584503088,738046272,188438137,921819200,697430148,137752459,
873342196,227078802,442976560,1034616614,172909972,40524786,
747034583,462482257,28803124,462481449,885322935,182269347},

{648793944,607217858,974232141,283030681,2576790,535183650,
157523670,496460795,334546972,8482709,896794205,786499822,
228269069,998643015,607626918,151122715,717253132,1010802792,
529041112,437142038,545850927,663932102,587251879,161482998,
958459306,918804181,617570748,471288770,418354821,666780001}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_11[k][l];
j++;


// DIMENSION dim=12,  generator matrices column encodings:

int C_12[12][30]={

{376009787,616649261,1038915818,449176030,680969485,844929903,
469210199,515424615,955287332,441067371,672960609,10667578,
518196311,909235475,829362448,606869120,1069286697,548650217,
281564703,956233651,30374325,339266501,406232992,308994419,
308329741,419071262,157656941,113798237,580526181,312086276},

{113325173,802884388,776006141,240665347,1067428575,237210076,
433405280,542548953,206172120,892707582,938920668,268533774,
427179081,64599497,584946987,850670289,1029168313,406383405,
567739064,243337945,534671208,284667432,604603719,624171720,
638094189,480469014,81680586,875930397,165521623,713379925},

{365589568,795832513,352548612,791353731,639030956,875424815,
460322970,209202842,769072557,62593514,554917907,422257425,
988433200,845378618,964807902,469755058,490235585,36511719,
305707082,338554719,877932899,475033153,48231578,414880648,
706291263,70011941,255603371,718605877,1049680271,203585716},

{435632494,172170459,1059343654,565249317,65081497,498668119,
696359679,815656005,627318345,886975033,230810440,958457568,
170678992,928599693,50537551,95312547,130331293,202074131,
1045327915,1032883628,259200551,538263735,525010700,117358056,
867099869,70373620,495094033,522626779,38232465,95758096},

{32678341,505635296,425856624,1054825470,1033723186,938870058,
269291076,814524247,656722885,524631983,597477638,436880436,
697998740,64815620,786707110,297283695,494619587,996221642,
743211695,532501720,485366627,575598237,246747572,221087582,
195011953,225867526,624744711,494497451,771083163,465002468},

{551397128,489766929,195538897,629476791,1006219829,921379579,
836280603,978070866,1007507930,236561171,759639615,439796207,
338293708,24298018,558561689,657466702,188516653,553216800,
981177690,1010977003,791689962,158536313,388269785,487774813,
224170145,624982216,529627459,530281195,133158627,81743442},

{768717957,184677116,591120478,258801695,981458210,434399026,
697605612,787798639,845498401,27242131,198461923,975748095,
873564500,808362448,829314929,599428700,553956900,646455049,
715447491,990180123,901857731,341740714,518651244,433436011,
393492963,156099629,1014527846,267932060,338771950,491714313},

{609470369,578981355,496170689,646129714,870096655,49561033,
642998690,66791072,319166205,892427797,521637492,815247648,
244676424,701940472,831147871,570779345,89071257,880115963,
152451089,13233731,318042497,408461437,1007221712,775537592,
174347183,811508503,942904086,319793289,566294292,956161085},

{690191426,28134813,207393949,406243981,500443338,244003934,
327631593,692702121,76532237,120264433,305592447,23783510,
936434940,129432986,891044703,133326731,759067238,805090750,
393846010,895707158,773285066,682629395,68829201,219221301,
116077786,1009888418,978576807,641438017,169610131,526023641},

{226253065,147381635,1009733192,730981142,441127473,1068685129,
902159719,362034294,888137773,862283775,338017958,22628013,
340658897,130197395,630654134,42912700,324565062,640826151,
540055184,214577500,940181002,475921976,880471073,962578486,
937098890,1035691007,496051649,546273064,104382506,758339435},

{980220447,391809923,926256294,896109598,310914840,979419742,
492998431,917440954,1036679165,877461802,482469020,413101932,
360109925,34299936,186285141,291647287,420363989,406330999,
854416866,979161387,721088013,775806082,25986602,601668135,
282692574,256034532,1047609668,427797668,402427615,284346209},

{805428583,869599887,1014763568,659252565,973942038,754651348,
897847746,182137879,679510472,128246679,807357794,396531141,
578604545,486979889,898367645,336668900,827682136,327305202,
213888167,744078157,351257983,316843621,473816217,495813680,
483886281,885162661,246466767,823380730,817597230,113843058}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_12[k][l];
j++;


// DIMENSION dim=13,  generator matrices column encodings:

int C_13[13][30]={

{376009787,616649261,1038915818,449176030,680969485,844929903,
469210199,515424615,955287332,441067371,672960609,10667578,
518196311,909235475,829362448,606869120,1069286697,548650217,
281564703,956233651,30374325,339266501,406232992,308994419,
308329741,419071262,157656941,113798237,580526181,312086276},

{113325173,802884388,776006141,240665347,1067428575,237210076,
433405280,542548953,206172120,892707582,938920668,268533774,
427179081,64599497,584946987,850670289,1029168313,406383405,
567739064,243337945,534671208,284667432,604603719,624171720,
638094189,480469014,81680586,875930397,165521623,713379925},

{365589568,795832513,352548612,791353731,639030956,875424815,
460322970,209202842,769072557,62593514,554917907,422257425,
988433200,845378618,964807902,469755058,490235585,36511719,
305707082,338554719,877932899,475033153,48231578,414880648,
706291263,70011941,255603371,718605877,1049680271,203585716},

{435632494,172170459,1059343654,565249317,65081497,498668119,
696359679,815656005,627318345,886975033,230810440,958457568,
170678992,928599693,50537551,95312547,130331293,202074131,
1045327915,1032883628,259200551,538263735,525010700,117358056,
867099869,70373620,495094033,522626779,38232465,95758096},

{32678341,505635296,425856624,1054825470,1033723186,938870058,
269291076,814524247,656722885,524631983,597477638,436880436,
697998740,64815620,786707110,297283695,494619587,996221642,
743211695,532501720,485366627,575598237,246747572,221087582,
195011953,225867526,624744711,494497451,771083163,465002468},

{551397128,489766929,195538897,629476791,1006219829,921379579,
836280603,978070866,1007507930,236561171,759639615,439796207,
338293708,24298018,558561689,657466702,188516653,553216800,
981177690,1010977003,791689962,158536313,388269785,487774813,
224170145,624982216,529627459,530281195,133158627,81743442},

{768717957,184677116,591120478,258801695,981458210,434399026,
697605612,787798639,845498401,27242131,198461923,975748095,
873564500,808362448,829314929,599428700,553956900,646455049,
715447491,990180123,901857731,341740714,518651244,433436011,
393492963,156099629,1014527846,267932060,338771950,491714313},

{609470369,578981355,496170689,646129714,870096655,49561033,
642998690,66791072,319166205,892427797,521637492,815247648,
244676424,701940472,831147871,570779345,89071257,880115963,
152451089,13233731,318042497,408461437,1007221712,775537592,
174347183,811508503,942904086,319793289,566294292,956161085},

{690191426,28134813,207393949,406243981,500443338,244003934,
327631593,692702121,76532237,120264433,305592447,23783510,
936434940,129432986,891044703,133326731,759067238,805090750,
393846010,895707158,773285066,682629395,68829201,219221301,
116077786,1009888418,978576807,641438017,169610131,526023641},

{226253065,147381635,1009733192,730981142,441127473,1068685129,
902159719,362034294,888137773,862283775,338017958,22628013,
340658897,130197395,630654134,42912700,324565062,640826151,
540055184,214577500,940181002,475921976,880471073,962578486,
937098890,1035691007,496051649,546273064,104382506,758339435},

{980220447,391809923,926256294,896109598,310914840,979419742,
492998431,917440954,1036679165,877461802,482469020,413101932,
360109925,34299936,186285141,291647287,420363989,406330999,
854416866,979161387,721088013,775806082,25986602,601668135,
282692574,256034532,1047609668,427797668,402427615,284346209},

{805428583,869599887,1014763568,659252565,973942038,754651348,
897847746,182137879,679510472,128246679,807357794,396531141,
578604545,486979889,898367645,336668900,827682136,327305202,
213888167,744078157,351257983,316843621,473816217,495813680,
483886281,885162661,246466767,823380730,817597230,113843058},

{775536582,900718787,360197547,657428423,989613149,276818072,
35434343,207452155,929686556,379446274,350997024,403659830,
201733068,183406655,581133571,783416532,685549740,39396776,
872208726,306668169,749911467,1003397486,871981435,563905409,
1059652571,635124084,913427898,606299715,882851360,902877678}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_13[k][l];
j++;


// DIMENSION dim=14,  generator matrices column encodings:

int C_14[14][30]={

{122455510,773296462,80386005,883424770,513326595,981703937,
1038812148,243570348,778200383,102755401,595654303,880576513,
296182727,1055400600,996075111,1052355578,964134372,482021623,
1010269190,146064639,699374654,545735549,783309448,241955223,
391613045,316095920,691188546,107203704,913774004,919011693},

{904829865,125800112,744836867,56211074,962495785,1014331605,
31766538,1036440779,378917045,863948098,170171268,150539741,
291559995,144340146,936281598,725120753,165033544,957473065,
142516263,917214920,406122355,215612829,806188527,444563495,
94075866,902187783,921358076,515829670,842057841,754580171},

{144252053,719681002,764865240,360782177,8473587,170796252,
322670896,824841090,715394417,308461745,767985005,603286018,
282278856,370444133,799573691,207061925,378626792,443460925,
747932389,190656701,112052892,838906526,456638239,308815925,
314952227,615497055,197589208,851292505,114291449,749275465},

{508763882,863822867,579200240,341866102,1020791415,952571345,
739394084,867999885,527833410,840385800,558226716,581629303,
539677350,61386309,344675504,571043943,679597514,131099271,
983978597,401123019,825124467,1023625675,887540408,932091587,
134304604,538330537,662740073,203901635,988267545,346153028},

{621391692,190216341,240288833,47344896,848418599,660064937,
724208392,17567804,947270235,290260854,65728614,661215123,
409991240,708141568,308244599,200143731,276033077,525109062,
395293500,464968947,618144500,326508566,615516113,557986837,
45672459,435884540,701004880,63546760,785500141,862516802},

{943528403,7424764,444055955,410453694,92186155,283874613,
17575750,133964545,995073250,957980469,277245753,188272488,
587777482,95089141,581464409,824556694,437316241,640484097,
696373407,412102094,239622123,522038752,228604636,453088305,
1071365639,498667903,869393790,449562132,1033358097,817761061},

{1023859687,860420336,437777716,959192061,251318774,343778092,
413416680,259452981,676804407,122487975,95708507,1054678216,
363422616,466995666,325488046,373888941,515222328,781087025,
997868815,459829544,41014936,226257344,331113322,597700410,
963882199,450825004,1020970018,804124363,40896571,505564148},

{755137672,742859173,936475141,354522321,797948600,730638890,
204492398,159152738,471715321,123471289,839297694,642348689,
750583992,76497646,744562819,577560611,139554140,626389783,
521865008,377281746,344637867,286741651,324330987,196287246,
804548810,417370381,309802854,984272094,97243419,1025617989},

{510369304,236761812,13110549,616873707,521953617,792634244,
531230079,775306128,407484179,747791618,694386176,331508215,
818343003,781023012,308300789,805796298,944521705,592032883,
269937303,405771211,145315315,973429799,145186174,1009885150,
723080138,412171449,770686949,674735092,953203371,379728005},

{1070788282,363613908,401556515,737472501,916971534,741851784,
15970839,575437740,308634173,456365136,610081937,655056737,
566499647,146062168,11265212,228034960,802031966,1016657337,
869981249,137320736,78544281,829883313,783146120,970701867,
916026634,195792316,317440031,798963377,662445144,432575740},

{512569269,413297986,617992871,699943554,930550099,360306596,
942139075,636897660,837676953,680872486,958145976,99814098,
1030494902,481157406,7043250,631984833,693125308,721326947,
543308348,845963501,280625890,62529592,1069504905,437525669,
15289504,1055367702,1030656218,1046177956,480251288,524111444},

{992641068,539842223,236658812,663216381,130221500,781554959,
707555422,697175772,211358555,98635777,101893269,685395385,
212974975,754694168,348080315,797978796,610517654,353789515,
740861326,561595503,738001445,148519155,1012540275,866018055,
814844210,985429376,726145203,572582243,242483828,104550108},

{1011761701,257012084,545603242,377614867,1001660721,374400720,
330700341,414707616,712426496,517978447,955401637,627264514,
163257057,560991681,704985699,647379336,71773275,710543791,
1023151414,22605165,301433606,348091287,20570843,637748854,
761625262,348250326,509470220,66005223,199807360,904227117},

{30303575,619474536,775105061,606619342,1020249710,1007526750,
1028531643,325064071,547200869,136261058,931704242,479402249,
970006018,326468943,265514350,545747566,716265983,1066574193,
925563822,652793902,970474175,832205384,982810047,1048889944,
439489154,226597362,888136689,138618060,814046664,550833263}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_14[k][l];
j++;


// DIMENSION dim=15,  generator matrices column encodings:

int C_15[15][30]={

{122455510,773296462,80386005,883424770,513326595,981703937,
1038812148,243570348,778200383,102755401,595654303,880576513,
296182727,1055400600,996075111,1052355578,964134372,482021623,
1010269190,146064639,699374654,545735549,783309448,241955223,
391613045,316095920,691188546,107203704,913774004,919011693},

{904829865,125800112,744836867,56211074,962495785,1014331605,
31766538,1036440779,378917045,863948098,170171268,150539741,
291559995,144340146,936281598,725120753,165033544,957473065,
142516263,917214920,406122355,215612829,806188527,444563495,
94075866,902187783,921358076,515829670,842057841,754580171},

{144252053,719681002,764865240,360782177,8473587,170796252,
322670896,824841090,715394417,308461745,767985005,603286018,
282278856,370444133,799573691,207061925,378626792,443460925,
747932389,190656701,112052892,838906526,456638239,308815925,
314952227,615497055,197589208,851292505,114291449,749275465},

{508763882,863822867,579200240,341866102,1020791415,952571345,
739394084,867999885,527833410,840385800,558226716,581629303,
539677350,61386309,344675504,571043943,679597514,131099271,
983978597,401123019,825124467,1023625675,887540408,932091587,
134304604,538330537,662740073,203901635,988267545,346153028},

{621391692,190216341,240288833,47344896,848418599,660064937,
724208392,17567804,947270235,290260854,65728614,661215123,
409991240,708141568,308244599,200143731,276033077,525109062,
395293500,464968947,618144500,326508566,615516113,557986837,
45672459,435884540,701004880,63546760,785500141,862516802},

{943528403,7424764,444055955,410453694,92186155,283874613,
17575750,133964545,995073250,957980469,277245753,188272488,
587777482,95089141,581464409,824556694,437316241,640484097,
696373407,412102094,239622123,522038752,228604636,453088305,
1071365639,498667903,869393790,449562132,1033358097,817761061},

{1023859687,860420336,437777716,959192061,251318774,343778092,
413416680,259452981,676804407,122487975,95708507,1054678216,
363422616,466995666,325488046,373888941,515222328,781087025,
997868815,459829544,41014936,226257344,331113322,597700410,
963882199,450825004,1020970018,804124363,40896571,505564148},

{755137672,742859173,936475141,354522321,797948600,730638890,
204492398,159152738,471715321,123471289,839297694,642348689,
750583992,76497646,744562819,577560611,139554140,626389783,
521865008,377281746,344637867,286741651,324330987,196287246,
804548810,417370381,309802854,984272094,97243419,1025617989},

{510369304,236761812,13110549,616873707,521953617,792634244,
531230079,775306128,407484179,747791618,694386176,331508215,
818343003,781023012,308300789,805796298,944521705,592032883,
269937303,405771211,145315315,973429799,145186174,1009885150,
723080138,412171449,770686949,674735092,953203371,379728005},

{1070788282,363613908,401556515,737472501,916971534,741851784,
15970839,575437740,308634173,456365136,610081937,655056737,
566499647,146062168,11265212,228034960,802031966,1016657337,
869981249,137320736,78544281,829883313,783146120,970701867,
916026634,195792316,317440031,798963377,662445144,432575740},

{512569269,413297986,617992871,699943554,930550099,360306596,
942139075,636897660,837676953,680872486,958145976,99814098,
1030494902,481157406,7043250,631984833,693125308,721326947,
543308348,845963501,280625890,62529592,1069504905,437525669,
15289504,1055367702,1030656218,1046177956,480251288,524111444},

{992641068,539842223,236658812,663216381,130221500,781554959,
707555422,697175772,211358555,98635777,101893269,685395385,
212974975,754694168,348080315,797978796,610517654,353789515,
740861326,561595503,738001445,148519155,1012540275,866018055,
814844210,985429376,726145203,572582243,242483828,104550108},

{1011761701,257012084,545603242,377614867,1001660721,374400720,
330700341,414707616,712426496,517978447,955401637,627264514,
163257057,560991681,704985699,647379336,71773275,710543791,
1023151414,22605165,301433606,348091287,20570843,637748854,
761625262,348250326,509470220,66005223,199807360,904227117},

{30303575,619474536,775105061,606619342,1020249710,1007526750,
1028531643,325064071,547200869,136261058,931704242,479402249,
970006018,326468943,265514350,545747566,716265983,1066574193,
925563822,652793902,970474175,832205384,982810047,1048889944,
439489154,226597362,888136689,138618060,814046664,550833263},

{342919228,684064825,70595553,821444772,1067772687,228365088,
875508409,523521168,568857749,27801078,14205486,54170645,
762348034,442111606,779018993,91884115,96334799,834145058,
517198826,311189041,351655502,129132263,71651785,69478110,
877457343,69399165,663085682,432724522,901588315,1036418771}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_15[k][l];
j++;


// DIMENSION dim=16,  generator matrices column encodings:

int C_16[16][30]={

{122028500,773796640,79828983,881800358,514905835,983783335,
1036076530,244094596,778726717,102223501,595753535,877977665,
293940545,1052797592,998015535,1049706940,961932202,479425179,
1008703202,146074807,699208338,545769971,783872744,241400761,
394095793,318234454,691017632,107693692,912226258,921650147},

{905747129,125669856,745948482,56213465,962367329,1013342451,
33005913,1037353434,377933797,863814511,170368760,150537961,
291553302,143356869,937198823,724066463,163851778,956426595,
141337432,918194684,406318084,215609507,806253540,443391870,
94009789,903116998,921416576,514601025,842089657,754668748},

{144510343,719814161,764739186,360776817,8475867,170405149,
322931744,825103235,715522888,308466584,767859270,603415209,
282275890,370575710,799840954,206934734,378632555,443071164,
748066014,190526844,111925134,838907447,456500383,309079437,
315082098,615099103,197455650,851153078,113882241,749580267},

{508694523,864018879,579267946,342582253,1020795729,953030849,
739794289,867481205,527701809,840844607,558748283,581697196,
539742130,61383864,344610789,571041724,679594220,131096939,
983843120,400800768,824994954,1023559165,888130186,931957442,
134307115,538930046,662758996,203788510,988761297,346276074},

{621389988,190147614,240354817,47413693,849070421,659871401,
724277355,17702764,947205554,289740834,65137593,660818834,
409403056,708667867,308049550,199617242,275965133,524584535,
395099063,465555703,618149148,326449146,616170625,558444702,
45281988,435823313,700583419,63138695,785407875,862058847},

{1024840886,860416911,437581387,960368629,251385071,342867483,
414589371,259388234,675558717,122625022,95841389,1054808264,
363428799,466082259,325425371,374938769,514306939,782072930,
997935942,459831567,39967148,226387339,331250224,597702156,
963817961,450635098,1021034056,805254254,39948930,505476103},

{943528130,6377416,442877338,409279699,92188770,283745105,
18625358,132919617,995069163,957055041,278160177,187351096,
588960203,94958252,582645249,825737187,437319588,640489793,
696376298,411055566,240803234,520987896,228602589,454136105,
1070180458,498802178,868346947,449441731,1033212799,816755189},

{755131930,742733924,936471700,354519697,797680387,730378704,
204496645,158891697,471453056,123212969,839163918,642739562,
750322088,76238277,744564601,577303792,139553741,626517950,
522000409,377015466,344773034,286611154,324463697,196282908,
804678176,417369934,309669814,984410809,97361422,1025588420},

{509774441,236305777,13111597,617457706,521501292,792079340,
530609804,775923580,406928336,748418988,694905554,332067769,
818309335,780466121,308368901,805729970,943997647,591997436,
270497271,405771136,144758335,973980081,145641057,1009847578,
723049798,412204818,770093665,675196944,953790072,380349499},

{1071829370,363611179,400021605,737468978,915884092,739197071,
12782863,578052546,308135759,453717337,611167682,655090680,
570175856,143441666,10178396,228528946,804652632,1016134480,
869977617,137349722,78541999,829917227,782058450,971718430,
916580062,195768456,316897570,799508767,662448934,435202045},

{514439921,411228727,618086450,697847559,930424358,358576228,
942010818,636808815,835672190,682739891,958268136,99823447,
1028538355,480855611,7031412,632123921,693133855,721035685,
543473531,843998686,278569684,62554824,1067281322,439356997,
13233123,1053001636,1028403740,1046301216,480255387,524286967},

{992744004,539739079,236795785,663216675,130224767,781522855,
707424299,696815199,211785248,98668673,101863869,685563385,
212940913,754823102,347687424,797980002,610518958,353825990,
741254507,562021180,737903974,148684693,1012708501,865658034,
814815730,985298406,726535512,572583637,242483404,104681103},

{410584653,1014456740,859507316,528229087,21041245,451335112,
273376174,370447156,145225655,100856626,216137927,880988295,
989591832,498229517,752029644,692203068,378212597,210534553,
1006542675,571190962,414912293,605262338,705870606,973888734,
652138388,898974866,574612904,349338863,639882306,1002077865},

{1011833690,256942639,546060759,378076728,1002288904,374437599,
331255010,414611228,713020731,517449415,955993684,627269219,
163250620,561092153,705439834,647441968,71777603,710053662,
1023152908,22606250,301863081,347532963,20017716,637718071,
761555051,348747465,509441421,65484519,199315376,904785068},

{342919423,684098882,70628500,821483431,1067777746,228200923,
875147916,523525120,569279558,28225579,14565382,54301638,
762352194,442241525,778625199,92020179,96204354,834571042,
517199569,311086769,351618653,129164929,71684553,69476856,
877292194,69366427,663054204,432857041,901460654,1036450973},

{32268518,619642010,775359809,604787067,1020096905,1009492987,
1030488316,323225398,549425125,136161349,934053943,479673465,
972140115,324513836,267614303,547742461,716557290,1068906183,
925792527,650693947,972834248,834331210,982702238,1051098972,
437684209,226568545,887965313,138875768,816273500,553069006}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_16[k][l];
j++;



// DIMENSION dim=17,  generator matrices column encodings:

int C_17[17][30]={

{129971866,403034142,42953265,456052922,529723536,39622889,
1022405131,495125695,205765660,236811057,61590560,562939695,
1009383060,28432675,166824630,956664215,988888538,657242377,
1023579691,437431770,927205331,608312395,1072853475,655700129,
27075613,636512015,837235128,226005552,875432949,795592105},

{240208052,897491798,957022978,171139102,93849129,244950800,
344159584,111102217,678504858,574516126,250455084,391388795,
133277104,489333922,140361892,410735402,619253688,1031862789,
335691611,322432037,806111734,694909702,349940897,602532064,
148117500,111729200,457404274,557714256,1040149279,403498667},

{432640305,1037156381,314925778,372080644,940221914,572058354,
1038338338,426569089,455769817,491120620,1057021567,302721707,
246475132,705152316,499194294,113265561,426137972,136848280,
562415570,787892679,852991603,351729970,96778882,304416578,
86282104,1036217109,157944466,954042255,414571869,870959303},

{971287756,89414420,204713973,378635447,401797896,163681059,
751966264,537449399,801535112,1071633688,146052774,3986810,
636727079,697417592,1006763522,383199535,663223922,144535570,
201016558,746200892,854342532,328874258,155896922,499850531,
936254650,7138453,1071466390,61395452,636873816,304460150},

{328557410,777876265,101075537,435479976,525041988,303555745,
350113747,339410275,684034311,889925340,401693876,1060788096,
113705201,1015366269,1065286982,10076601,952361191,167950482,
435129959,233185538,781449455,798849169,428671146,124812670,
188788880,15299783,859915815,1015278018,326831435,1018648256},

{754655229,72701120,953293325,631599840,89857942,554011778,
47073811,835760886,265073629,127620500,308658367,867391607,
203498672,894076239,524964741,312496838,313578784,269715110,
705844852,823949536,1027242087,59395526,569377093,394836031,
343701223,384460815,943904084,699855722,421835371,270791893},

{745907108,944952526,82284004,699536358,361313725,905488055,
1023155197,882057901,746645466,119817566,452638563,1550867,
1031436690,776155790,394503730,685193551,228707474,911100838,
964828725,508995720,1026359451,428405268,817946254,828929109,
313584437,871581416,426427170,160301328,365965375,220499879},

{1056914698,521647651,221143510,117107134,150943194,408928603,
480271744,848194951,172435885,473080053,275662818,324152353,
59283147,131089463,834982831,778766731,122554353,88292162,
763906051,129869508,637389308,823280981,671656942,66520354,
308342240,325794549,6816340,371091997,621547052,25705907},

{352064385,40386260,880715911,677695864,1005975671,853795757,
574407480,530348942,601261381,103248825,975989152,739827654,
863177279,460530535,159413890,688421859,1044972575,795098007,
801093227,1001062741,926378401,139434982,834760968,204950615,
639313518,920958373,495164640,91682281,69551285,433426629},

{830376956,810354778,986692688,439214662,955852394,611884049,
928650736,168559105,1064592932,151376416,433454075,1011126901,
608575983,128899860,905698379,606430135,179348441,821647220,
998454680,127121984,795384066,600759059,199794554,295176814,
939420101,914617710,1018471342,111811433,331709918,221179210},

{425733878,658229029,912424615,386431078,862251738,293702507,
1043902477,877189394,48926307,261568902,462823467,217704510,
305034830,297130225,26429996,343060209,894475863,17832215,
1065385292,231895796,449755847,855378457,567620577,152049881,
814862897,582773843,514674944,282536321,434990576,459545057},

{665803357,392676405,1034814418,748287515,958635983,4816387,
1034522664,915407014,57358263,113520872,253432907,18329885,
1870034,67039950,583108703,159185799,130709561,976056560,
448806026,846991206,686503884,308824271,436305887,194443459,
777220336,1039366896,793594637,928986568,632103016,946360556},

{626519650,572986777,596911660,888597461,756498052,392128719,
36970690,1052917571,313118633,522168466,842712620,894477415,
1055471970,11136187,252204038,40861408,975737116,212304344,
965813895,726672608,429270148,457534820,770940172,116146229,
243261641,1010332968,788194608,944433533,826152594,747969338},

{1071582690,774188573,739663870,52487898,1048372764,921959408,
547457522,429672649,490994041,25062518,805601797,589439943,
496185778,639115556,433359194,327519661,726063918,256775538,
973277956,33829588,639364507,351093493,73945571,631973049,
882014952,196800376,470141183,501641249,527537127,1041746568},

{635515840,789421408,903280967,937233682,987061368,245651243,
162035928,13403621,749035327,131961461,612384091,371767111,
944735537,346467471,292218132,1012693329,199650456,41027984,
707150170,430658317,13393404,392035786,595614074,557315511,
666890400,868924491,243135067,323841161,1027036232,622805502},

{449543741,1068764199,919033015,422588592,252659057,380512547,
538163030,67298058,638240573,691740025,524238634,479950745,
602605950,1001285057,908196893,633023435,307774415,725379120,
956739667,806388387,886237605,205177588,348918954,334053401,
738869676,213168145,1010252086,29197916,769372946,291583312},

{741738850,1073019312,151484689,963933996,549606967,851354389,
277323389,157310630,427601638,817151586,491424124,737041173,
736095612,646603916,295404110,614293779,110322022,227217880,
596496751,455560392,177091156,799938318,212552277,239995158,
942974955,977308770,319620009,456207171,829064434,160328806}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_17[k][l];
j++;


// DIMENSION dim=18,  generator matrices column encodings:

int C_18[18][30]={

{129971866,403034142,42953265,456052922,529723536,39622889,
1022405131,495125695,205765660,236811057,61590560,562939695,
1009383060,28432675,166824630,956664215,988888538,657242377,
1023579691,437431770,927205331,608312395,1072853475,655700129,
27075613,636512015,837235128,226005552,875432949,795592105},

{240208052,897491798,957022978,171139102,93849129,244950800,
344159584,111102217,678504858,574516126,250455084,391388795,
133277104,489333922,140361892,410735402,619253688,1031862789,
335691611,322432037,806111734,694909702,349940897,602532064,
148117500,111729200,457404274,557714256,1040149279,403498667},

{432640305,1037156381,314925778,372080644,940221914,572058354,
1038338338,426569089,455769817,491120620,1057021567,302721707,
246475132,705152316,499194294,113265561,426137972,136848280,
562415570,787892679,852991603,351729970,96778882,304416578,
86282104,1036217109,157944466,954042255,414571869,870959303},

{971287756,89414420,204713973,378635447,401797896,163681059,
751966264,537449399,801535112,1071633688,146052774,3986810,
636727079,697417592,1006763522,383199535,663223922,144535570,
201016558,746200892,854342532,328874258,155896922,499850531,
936254650,7138453,1071466390,61395452,636873816,304460150},

{328557410,777876265,101075537,435479976,525041988,303555745,
350113747,339410275,684034311,889925340,401693876,1060788096,
113705201,1015366269,1065286982,10076601,952361191,167950482,
435129959,233185538,781449455,798849169,428671146,124812670,
188788880,15299783,859915815,1015278018,326831435,1018648256},

{754655229,72701120,953293325,631599840,89857942,554011778,
47073811,835760886,265073629,127620500,308658367,867391607,
203498672,894076239,524964741,312496838,313578784,269715110,
705844852,823949536,1027242087,59395526,569377093,394836031,
343701223,384460815,943904084,699855722,421835371,270791893},

{745907108,944952526,82284004,699536358,361313725,905488055,
1023155197,882057901,746645466,119817566,452638563,1550867,
1031436690,776155790,394503730,685193551,228707474,911100838,
964828725,508995720,1026359451,428405268,817946254,828929109,
313584437,871581416,426427170,160301328,365965375,220499879},

{1056914698,521647651,221143510,117107134,150943194,408928603,
480271744,848194951,172435885,473080053,275662818,324152353,
59283147,131089463,834982831,778766731,122554353,88292162,
763906051,129869508,637389308,823280981,671656942,66520354,
308342240,325794549,6816340,371091997,621547052,25705907},

{352064385,40386260,880715911,677695864,1005975671,853795757,
574407480,530348942,601261381,103248825,975989152,739827654,
863177279,460530535,159413890,688421859,1044972575,795098007,
801093227,1001062741,926378401,139434982,834760968,204950615,
639313518,920958373,495164640,91682281,69551285,433426629},

{830376956,810354778,986692688,439214662,955852394,611884049,
928650736,168559105,1064592932,151376416,433454075,1011126901,
608575983,128899860,905698379,606430135,179348441,821647220,
998454680,127121984,795384066,600759059,199794554,295176814,
939420101,914617710,1018471342,111811433,331709918,221179210},

{425733878,658229029,912424615,386431078,862251738,293702507,
1043902477,877189394,48926307,261568902,462823467,217704510,
305034830,297130225,26429996,343060209,894475863,17832215,
1065385292,231895796,449755847,855378457,567620577,152049881,
814862897,582773843,514674944,282536321,434990576,459545057},

{665803357,392676405,1034814418,748287515,958635983,4816387,
1034522664,915407014,57358263,113520872,253432907,18329885,
1870034,67039950,583108703,159185799,130709561,976056560,
448806026,846991206,686503884,308824271,436305887,194443459,
777220336,1039366896,793594637,928986568,632103016,946360556},

{626519650,572986777,596911660,888597461,756498052,392128719,
36970690,1052917571,313118633,522168466,842712620,894477415,
1055471970,11136187,252204038,40861408,975737116,212304344,
965813895,726672608,429270148,457534820,770940172,116146229,
243261641,1010332968,788194608,944433533,826152594,747969338},

{1071582690,774188573,739663870,52487898,1048372764,921959408,
547457522,429672649,490994041,25062518,805601797,589439943,
496185778,639115556,433359194,327519661,726063918,256775538,
973277956,33829588,639364507,351093493,73945571,631973049,
882014952,196800376,470141183,501641249,527537127,1041746568},

{635515840,789421408,903280967,937233682,987061368,245651243,
162035928,13403621,749035327,131961461,612384091,371767111,
944735537,346467471,292218132,1012693329,199650456,41027984,
707150170,430658317,13393404,392035786,595614074,557315511,
666890400,868924491,243135067,323841161,1027036232,622805502},

{449543741,1068764199,919033015,422588592,252659057,380512547,
538163030,67298058,638240573,691740025,524238634,479950745,
602605950,1001285057,908196893,633023435,307774415,725379120,
956739667,806388387,886237605,205177588,348918954,334053401,
738869676,213168145,1010252086,29197916,769372946,291583312},

{741738850,1073019312,151484689,963933996,549606967,851354389,
277323389,157310630,427601638,817151586,491424124,737041173,
736095612,646603916,295404110,614293779,110322022,227217880,
596496751,455560392,177091156,799938318,212552277,239995158,
942974955,977308770,319620009,456207171,829064434,160328806},

{751747817,315669162,1072571913,627839530,710228931,164629564,
195148759,354677796,438058535,197451362,893770061,655242823,
933207855,1034931553,1008083539,186134820,228361620,632147422,
1051983424,579762179,835229716,490118527,935155568,444896042,
190533305,524870331,248465921,840689687,498889988,302936823}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_18[k][l];
j++;



// DIMENSION dim=19,  generator matrices column encodings:

int C_19[19][30]={

{129971866,403034142,42953265,456052922,529723536,39622889,
1022405131,495125695,205765660,236811057,61590560,562939695,
1009383060,28432675,166824630,956664215,988888538,657242377,
1023579691,437431770,927205331,608312395,1072853475,655700129,
27075613,636512015,837235128,226005552,875432949,795592105},

{240208052,897491798,957022978,171139102,93849129,244950800,
344159584,111102217,678504858,574516126,250455084,391388795,
133277104,489333922,140361892,410735402,619253688,1031862789,
335691611,322432037,806111734,694909702,349940897,602532064,
148117500,111729200,457404274,557714256,1040149279,403498667},

{432640305,1037156381,314925778,372080644,940221914,572058354,
1038338338,426569089,455769817,491120620,1057021567,302721707,
246475132,705152316,499194294,113265561,426137972,136848280,
562415570,787892679,852991603,351729970,96778882,304416578,
86282104,1036217109,157944466,954042255,414571869,870959303},

{971287756,89414420,204713973,378635447,401797896,163681059,
751966264,537449399,801535112,1071633688,146052774,3986810,
636727079,697417592,1006763522,383199535,663223922,144535570,
201016558,746200892,854342532,328874258,155896922,499850531,
936254650,7138453,1071466390,61395452,636873816,304460150},

{328557410,777876265,101075537,435479976,525041988,303555745,
350113747,339410275,684034311,889925340,401693876,1060788096,
113705201,1015366269,1065286982,10076601,952361191,167950482,
435129959,233185538,781449455,798849169,428671146,124812670,
188788880,15299783,859915815,1015278018,326831435,1018648256},

{754655229,72701120,953293325,631599840,89857942,554011778,
47073811,835760886,265073629,127620500,308658367,867391607,
203498672,894076239,524964741,312496838,313578784,269715110,
705844852,823949536,1027242087,59395526,569377093,394836031,
343701223,384460815,943904084,699855722,421835371,270791893},

{745907108,944952526,82284004,699536358,361313725,905488055,
1023155197,882057901,746645466,119817566,452638563,1550867,
1031436690,776155790,394503730,685193551,228707474,911100838,
964828725,508995720,1026359451,428405268,817946254,828929109,
313584437,871581416,426427170,160301328,365965375,220499879},

{1056914698,521647651,221143510,117107134,150943194,408928603,
480271744,848194951,172435885,473080053,275662818,324152353,
59283147,131089463,834982831,778766731,122554353,88292162,
763906051,129869508,637389308,823280981,671656942,66520354,
308342240,325794549,6816340,371091997,621547052,25705907},

{352064385,40386260,880715911,677695864,1005975671,853795757,
574407480,530348942,601261381,103248825,975989152,739827654,
863177279,460530535,159413890,688421859,1044972575,795098007,
801093227,1001062741,926378401,139434982,834760968,204950615,
639313518,920958373,495164640,91682281,69551285,433426629},

{830376956,810354778,986692688,439214662,955852394,611884049,
928650736,168559105,1064592932,151376416,433454075,1011126901,
608575983,128899860,905698379,606430135,179348441,821647220,
998454680,127121984,795384066,600759059,199794554,295176814,
939420101,914617710,1018471342,111811433,331709918,221179210},

{425733878,658229029,912424615,386431078,862251738,293702507,
1043902477,877189394,48926307,261568902,462823467,217704510,
305034830,297130225,26429996,343060209,894475863,17832215,
1065385292,231895796,449755847,855378457,567620577,152049881,
814862897,582773843,514674944,282536321,434990576,459545057},

{665803357,392676405,1034814418,748287515,958635983,4816387,
1034522664,915407014,57358263,113520872,253432907,18329885,
1870034,67039950,583108703,159185799,130709561,976056560,
448806026,846991206,686503884,308824271,436305887,194443459,
777220336,1039366896,793594637,928986568,632103016,946360556},

{626519650,572986777,596911660,888597461,756498052,392128719,
36970690,1052917571,313118633,522168466,842712620,894477415,
1055471970,11136187,252204038,40861408,975737116,212304344,
965813895,726672608,429270148,457534820,770940172,116146229,
243261641,1010332968,788194608,944433533,826152594,747969338},

{1071582690,774188573,739663870,52487898,1048372764,921959408,
547457522,429672649,490994041,25062518,805601797,589439943,
496185778,639115556,433359194,327519661,726063918,256775538,
973277956,33829588,639364507,351093493,73945571,631973049,
882014952,196800376,470141183,501641249,527537127,1041746568},

{635515840,789421408,903280967,937233682,987061368,245651243,
162035928,13403621,749035327,131961461,612384091,371767111,
944735537,346467471,292218132,1012693329,199650456,41027984,
707150170,430658317,13393404,392035786,595614074,557315511,
666890400,868924491,243135067,323841161,1027036232,622805502},

{449543741,1068764199,919033015,422588592,252659057,380512547,
538163030,67298058,638240573,691740025,524238634,479950745,
602605950,1001285057,908196893,633023435,307774415,725379120,
956739667,806388387,886237605,205177588,348918954,334053401,
738869676,213168145,1010252086,29197916,769372946,291583312},

{741738850,1073019312,151484689,963933996,549606967,851354389,
277323389,157310630,427601638,817151586,491424124,737041173,
736095612,646603916,295404110,614293779,110322022,227217880,
596496751,455560392,177091156,799938318,212552277,239995158,
942974955,977308770,319620009,456207171,829064434,160328806},

{751747817,315669162,1072571913,627839530,710228931,164629564,
195148759,354677796,438058535,197451362,893770061,655242823,
933207855,1034931553,1008083539,186134820,228361620,632147422,
1051983424,579762179,835229716,490118527,935155568,444896042,
190533305,524870331,248465921,840689687,498889988,302936823},

{231782923,564441136,313799900,266020321,107576271,637714276,
276715238,1041069275,782157799,490431753,619629874,682769192,
84396062,1057857132,297378685,291285635,788347610,651201612,
634291722,566191297,848749961,222420643,105329531,619183894,
916439463,89124187,439251173,359317962,570853204,769320185}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_19[k][l];
j++;


// DIMENSION dim=20,  generator matrices column encodings:

int C_20[20][30]={

{129971866,403034142,42953265,456052922,529723536,39622889,
1022405131,495125695,205765660,236811057,61590560,562939695,
1009383060,28432675,166824630,956664215,988888538,657242377,
1023579691,437431770,927205331,608312395,1072853475,655700129,
27075613,636512015,837235128,226005552,875432949,795592105},

{240208052,897491798,957022978,171139102,93849129,244950800,
344159584,111102217,678504858,574516126,250455084,391388795,
133277104,489333922,140361892,410735402,619253688,1031862789,
335691611,322432037,806111734,694909702,349940897,602532064,
148117500,111729200,457404274,557714256,1040149279,403498667},

{432640305,1037156381,314925778,372080644,940221914,572058354,
1038338338,426569089,455769817,491120620,1057021567,302721707,
246475132,705152316,499194294,113265561,426137972,136848280,
562415570,787892679,852991603,351729970,96778882,304416578,
86282104,1036217109,157944466,954042255,414571869,870959303},

{971287756,89414420,204713973,378635447,401797896,163681059,
751966264,537449399,801535112,1071633688,146052774,3986810,
636727079,697417592,1006763522,383199535,663223922,144535570,
201016558,746200892,854342532,328874258,155896922,499850531,
936254650,7138453,1071466390,61395452,636873816,304460150},

{328557410,777876265,101075537,435479976,525041988,303555745,
350113747,339410275,684034311,889925340,401693876,1060788096,
113705201,1015366269,1065286982,10076601,952361191,167950482,
435129959,233185538,781449455,798849169,428671146,124812670,
188788880,15299783,859915815,1015278018,326831435,1018648256},

{754655229,72701120,953293325,631599840,89857942,554011778,
47073811,835760886,265073629,127620500,308658367,867391607,
203498672,894076239,524964741,312496838,313578784,269715110,
705844852,823949536,1027242087,59395526,569377093,394836031,
343701223,384460815,943904084,699855722,421835371,270791893},

{745907108,944952526,82284004,699536358,361313725,905488055,
1023155197,882057901,746645466,119817566,452638563,1550867,
1031436690,776155790,394503730,685193551,228707474,911100838,
964828725,508995720,1026359451,428405268,817946254,828929109,
313584437,871581416,426427170,160301328,365965375,220499879},

{1056914698,521647651,221143510,117107134,150943194,408928603,
480271744,848194951,172435885,473080053,275662818,324152353,
59283147,131089463,834982831,778766731,122554353,88292162,
763906051,129869508,637389308,823280981,671656942,66520354,
308342240,325794549,6816340,371091997,621547052,25705907},

{352064385,40386260,880715911,677695864,1005975671,853795757,
574407480,530348942,601261381,103248825,975989152,739827654,
863177279,460530535,159413890,688421859,1044972575,795098007,
801093227,1001062741,926378401,139434982,834760968,204950615,
639313518,920958373,495164640,91682281,69551285,433426629},

{830376956,810354778,986692688,439214662,955852394,611884049,
928650736,168559105,1064592932,151376416,433454075,1011126901,
608575983,128899860,905698379,606430135,179348441,821647220,
998454680,127121984,795384066,600759059,199794554,295176814,
939420101,914617710,1018471342,111811433,331709918,221179210},

{425733878,658229029,912424615,386431078,862251738,293702507,
1043902477,877189394,48926307,261568902,462823467,217704510,
305034830,297130225,26429996,343060209,894475863,17832215,
1065385292,231895796,449755847,855378457,567620577,152049881,
814862897,582773843,514674944,282536321,434990576,459545057},

{665803357,392676405,1034814418,748287515,958635983,4816387,
1034522664,915407014,57358263,113520872,253432907,18329885,
1870034,67039950,583108703,159185799,130709561,976056560,
448806026,846991206,686503884,308824271,436305887,194443459,
777220336,1039366896,793594637,928986568,632103016,946360556},

{626519650,572986777,596911660,888597461,756498052,392128719,
36970690,1052917571,313118633,522168466,842712620,894477415,
1055471970,11136187,252204038,40861408,975737116,212304344,
965813895,726672608,429270148,457534820,770940172,116146229,
243261641,1010332968,788194608,944433533,826152594,747969338},

{1071582690,774188573,739663870,52487898,1048372764,921959408,
547457522,429672649,490994041,25062518,805601797,589439943,
496185778,639115556,433359194,327519661,726063918,256775538,
973277956,33829588,639364507,351093493,73945571,631973049,
882014952,196800376,470141183,501641249,527537127,1041746568},

{635515840,789421408,903280967,937233682,987061368,245651243,
162035928,13403621,749035327,131961461,612384091,371767111,
944735537,346467471,292218132,1012693329,199650456,41027984,
707150170,430658317,13393404,392035786,595614074,557315511,
666890400,868924491,243135067,323841161,1027036232,622805502},

{449543741,1068764199,919033015,422588592,252659057,380512547,
538163030,67298058,638240573,691740025,524238634,479950745,
602605950,1001285057,908196893,633023435,307774415,725379120,
956739667,806388387,886237605,205177588,348918954,334053401,
738869676,213168145,1010252086,29197916,769372946,291583312},

{741738850,1073019312,151484689,963933996,549606967,851354389,
277323389,157310630,427601638,817151586,491424124,737041173,
736095612,646603916,295404110,614293779,110322022,227217880,
596496751,455560392,177091156,799938318,212552277,239995158,
942974955,977308770,319620009,456207171,829064434,160328806},

{751747817,315669162,1072571913,627839530,710228931,164629564,
195148759,354677796,438058535,197451362,893770061,655242823,
933207855,1034931553,1008083539,186134820,228361620,632147422,
1051983424,579762179,835229716,490118527,935155568,444896042,
190533305,524870331,248465921,840689687,498889988,302936823},

{231782923,564441136,313799900,266020321,107576271,637714276,
276715238,1041069275,782157799,490431753,619629874,682769192,
84396062,1057857132,297378685,291285635,788347610,651201612,
634291722,566191297,848749961,222420643,105329531,619183894,
916439463,89124187,439251173,359317962,570853204,769320185},

{676629042,890605142,1002839327,523688601,94150929,345382736,
917470425,448046156,11104351,421774295,1003535548,690755745,
1072393822,110502200,1046710617,863643895,501940838,1005596262,
177889070,894474600,1024283517,536108296,511361182,597326621,
33078708,897620545,435132721,213718759,160790581,74282284}

};

// copy the values into genMats[j]
for(int k=0;k<j;k++)
for(int l=0;l<30;l++) genMats[j-4][k][l]=C_20[k][l];
j++;

// end genMats

       
// array of current nx-integers, 
// shift d->d-4 in generator matrix index
for(int j=0;j<dim;j++)x_int[j]=genMats[d-4][j][0];
       
} // end constructor

}; // end NXT




/*******************************************************************************
 *
 *                     SOBOL SEQUENCE
 *
 ******************************************************************************/


/** <p>Generator for the Sobol sequence. Uses the Gray code counter and bitwise 
  operations for very fast point generation.</p>
  
  <p>Use \f$N=2^n-1, n=1,2,\dots\f$  points for QMC integration.
  At \f$N=2^n-1\f$ the Gray code counter G(k) is in sync with the integer sequence
  \f$k=1,2,\dots\f$ again, that is \f$\{G(1),\dots,G(N)\}=\{1,\dots,N\}.</p>

  <p><b>Dimension:</b> the Sobol generator is implemented only in dimension
  at most 300. The current implementation relies on primitive polynomials 
  and initialization numbers from the book [J]:
  <i>Monte Carlo Methods in Finance</i> by Peter Jaeckel, Wiley,
  ISNB 047149741X. The CD sold with the book contains millions of 
  primitive polynomials allowing you to extend the generator to millions of 
  dimensions.</p>
 
  <p>If the dimension is small low discrepancy sequences are significantly 
  better Monte Carlo integrators than uniform sequences while this advantage 
  seems to fade as the dimension increases at least if the number N of points
  is restricted to values that are realistic in applications.</p>

  <p>This would argue that we apply the Sobol sequence to a small number of
  important dimensions while driving the remaining dimensions with a uniform
  sequence. On the other hand [J] presents evidence that the Sobol sequence
  keeps up with the uniform sequence at any number N of points even in high 
  dimensions if the initialization numbers are chosen properly.</p>

  <p>In this regard it should be noted that even the best uniform random number 
  generator, the Mersenne Twister is only known to deliver an equidistributed
  sequence up to dimension 623. If the sequence is not equidistributed
  we do not know wether the Monte Carlo integral converges to the true integral
  as the number N of points inreases to infinity. Low discrepancy sequences on 
  the other hand are equidistributed in every dimension and so the Monte
  Carlo integral is guarenteed to converge to the true value of the integral.
  </p>

  <p>The reader is advised to consult [J] for a detailed description of 
  techniques to reduce effective dimensionality and much additional 
  source code related to Monte Carlo simulation. It is an excellent reference 
  on the topic.</p>
 */
class Sobol : public LowDiscrepancySequence {
    
	typedef unsigned long int32;
    static const int bits=32;             // we are using 32 bit integers
    static const Real N=4294967296.0;     // 2^32
    
    
    int32** v;       // v[k] - array of direction numbers for dimension k
    int** p;         // p[k] - coefficient array of the k-th primitive polynomial
    int* g;          // g[k] - degree of the k-th primitive polynomial
    int32* x_int;    // current vector of Sobol integers
	
	int index;      // index of current Sobol point
    
public:
    
// THE SOBOL POINTS

    void restart()
    {
        index=1;
        // return the integer vector to the initial state
        for(int k=0;k<dim;k++)x_int[k]=v[k][0];
    }
    

   /** The next Sobol point in the unit cube [0,1]^dim.
    */
    Real* nextPoint()
    {
        // find the rightmost zero bit of index
        int j=0, n=index;
        while(n%2==1){ n=n>>1; j++; }
        
        for(int k=0;k<dim;k++) { x_int[k]^=v[k][j];
                                 x[k]=((Real)x_int[k])/N; }
        
        index++;
        return x;
    }
    
    
	
// CONSTRUCTOR
	
	
    /** <p>A primitive polynomial p(x) modulo 2 is encoded by a pair of numbers 
     *  (d,n) as follows: d=degree(p), the leading and trailing coefficient of p
     *  are 1 and the intermediate coefficients are the bits of n in the binary
     *  representation of n: for example the polynomial</p>
     *
     * <center> 1+x+x^2+x^4+x^5 </center>
     *
     * <p> with coefficients (1)1101(1) is encoded as (5,n) with n=1101=13.
     *  In other words the least significant bit of n corresponds to the 
     *  second highest power of x etc.</p>
     *
     *  <p> The routine allocates the coefficient array p[k] of this 
     *  polynomial and writes the coefficients into the array with powers of x 
     *  decreasing left to right.</p>
     *
     * @param k polynomial is to be stored as p[k]
     * @param n,d encodings of polynomial
     */
     void read_prim_pol(int k, int n, int d)
     {
         p[k]=new int[d+1];
         
         int j=0; p[k][d]=1;
         while(n>0){ j++; p[k][d-j]=n%2; n=n/2; }
         p[k][0]=1;
     }
	 
	/** Test function, prints the v[j][k] initialization.
	 */
    void printInitialization()
    { 
	    int n=min(dim-1,30);
        cout << endl << "Sobol sequence, v[j][k]: ";
	    for(int j=0;j<n;j++){
		
		    cout << endl << endl;
		    for(int k=0;k<6;k++)
		    cout << endl << "v["<<j<<"]["<<k<<"]="<<v[j][k];
	    }
	
     } // end printInitialization

    
/** Constructor
 * @param dim dimension of the Sobol sequence.
 */
Sobol(int dim) : 
LowDiscrepancySequence(dim),
v(new int32*[dim]),
p(new int*[dim]),
g(new int[dim]),
x_int(new int32[dim]),
index(1)
{
	if(dim>3500){
		
		std::cout << endl 
		          << "Sobol sequence: dimension at most 3500. Aborting.";
		exit(0);
	}

// 3608 primitive polynomials, 
// first coordinate is the encoding,
// second coordinate is the degree
int pp[][2]={
{0,0},                    // read_primpol handles this correctly
{0,1},
{1,2},
{1,3},
{2,3},
{1,4},
{4,4},
{2,5},
{4,5},
{7,5},
{11,5},
{13,5},
{14,5},
{1,6},
{13,6},
{16,6},
{19,6},
{22,6},
{25,6},
{1,7},
{4,7},
{7,7},
{8,7},
{14,7},
{19,7},
{21,7},
{28,7},
{31,7},
{32,7},
{37,7},
{41,7},
{42,7},
{50,7},
{55,7},
{56,7},
{59,7},
{62,7},
{14,8},
{21,8},
{22,8},
{38,8},
{47,8},
{49,8},
{50,8},
{52,8},
{56,8},
{67,8},
{70,8},
{84,8},
{97,8},
{103,8},
{115,8},
{122,8},
{8,9},
{13,9},
{16,9},
{22,9},
{25,9},
{44,9},
{47,9},
{52,9},
{55,9},
{59,9},
{62,9},
{67,9},
{74,9},
{81,9},
{82,9},
{87,9},
{91,9},
{94,9},
{103,9},
{104,9},
{109,9},
{122,9},
{124,9},
{137,9},
{138,9},
{143,9},
{145,9},
{152,9},
{157,9},
{167,9},
{173,9},
{176,9},
{181,9},
{182,9},
{185,9},
{191,9},
{194,9},
{199,9},
{218,9},
{220,9},
{227,9},
{229,9},
{230,9},
{234,9},
{236,9},
{241,9},
{244,9},
{253,9},
{4,10},
{13,10},
{19,10},
{22,10},
{50,10},
{55,10},
{64,10},
{69,10},
{98,10},
{107,10},
{115,10},
{121,10},
{127,10},
{134,10},
{140,10},
{145,10},
{152,10},
{158,10},
{161,10},
{171,10},
{181,10},
{194,10},
{199,10},
{203,10},
{208,10},
{227,10},
{242,10},
{251,10},
{253,10},
{265,10},
{266,10},
{274,10},
{283,10},
{289,10},
{295,10},
{301,10},
{316,10},
{319,10},
{324,10},
{346,10},
{352,10},
{361,10},
{367,10},
{382,10},
{395,10},
{398,10},
{400,10},
{412,10},
{419,10},
{422,10},
{426,10},
{428,10},
{433,10},
{446,10},
{454,10},
{457,10},
{472,10},
{493,10},
{505,10},
{508,10},
{2,11},
{11,11},
{21,11},
{22,11},
{35,11},
{49,11},
{50,11},
{56,11},
{61,11},
{70,11},
{74,11},
{79,11},
{84,11},
{88,11},
{103,11},
{104,11},
{112,11},
{115,11},
{117,11},
{122,11},
{134,11},
{137,11},
{146,11},
{148,11},
{157,11},
{158,11},
{162,11},
{164,11},
{168,11},
{173,11},
{185,11},
{186,11},
{191,11},
{193,11},
{199,11},
{213,11},
{214,11},
{220,11},
{227,11},
{236,11},
{242,11},
{251,11},
{256,11},
{259,11},
{265,11},
{266,11},
{276,11},
{292,11},
{304,11},
{310,11},
{316,11},
{319,11},
{322,11},
{328,11},
{334,11},
{339,11},
{341,11},
{345,11},
{346,11},
{362,11},
{367,11},
{372,11},
{375,11},
{376,11},
{381,11},
{385,11},
{388,11},
{392,11},
{409,11},
{415,11},
{416,11},
{421,11},
{428,11},
{431,11},
{434,11},
{439,11},
{446,11},
{451,11},
{453,11},
{457,11},
{458,11},
{471,11},
{475,11},
{478,11},
{484,11},
{493,11},
{494,11},
{499,11},
{502,11},
{517,11},
{518,11},
{524,11},
{527,11},
{555,11},
{560,11},
{565,11},
{569,11},
{578,11},
{580,11},
{587,11},
{589,11},
{590,11},
{601,11},
{607,11},
{611,11},
{614,11},
{617,11},
{618,11},
{625,11},
{628,11},
{635,11},
{641,11},
{647,11},
{654,11},
{659,11},
{662,11},
{672,11},
{675,11},
{682,11},
{684,11},
{689,11},
{695,11},
{696,11},
{713,11},
{719,11},
{724,11},
{733,11},
{734,11},
{740,11},
{747,11},
{749,11},
{752,11},
{755,11},
{762,11},
{770,11},
{782,11},
{784,11},
{787,11},
{789,11},
{793,11},
{796,11},
{803,11},
{805,11},
{810,11},
{815,11},
{824,11},
{829,11},
{830,11},
{832,11},
{841,11},
{847,11},
{849,11},
{861,11},
{871,11},
{878,11},
{889,11},
{892,11},
{901,11},
{908,11},
{920,11},
{923,11},
{942,11},
{949,11},
{950,11},
{954,11},
{961,11},
{968,11},
{971,11},
{973,11},
{979,11},
{982,11},
{986,11},
{998,11},
{1001,11},
{1010,11},
{1012,11},
{41,12},
{52,12},
{61,12},
{62,12},
{76,12},
{104,12},
{117,12},
{131,12},
{143,12},
{145,12},
{157,12},
{167,12},
{171,12},
{176,12},
{181,12},
{194,12},
{217,12},
{236,12},
{239,12},
{262,12},
{283,12},
{286,12},
{307,12},
{313,12},
{319,12},
{348,12},
{352,12},
{357,12},
{391,12},
{398,12},
{400,12},
{412,12},
{415,12},
{422,12},
{440,12},
{460,12},
{465,12},
{468,12},
{515,12},
{536,12},
{539,12},
{551,12},
{558,12},
{563,12},
{570,12},
{595,12},
{598,12},
{617,12},
{647,12},
{654,12},
{678,12},
{713,12},
{738,12},
{747,12},
{750,12},
{757,12},
{772,12},
{803,12},
{810,12},
{812,12},
{850,12},
{862,12},
{906,12},
{908,12},
{929,12},
{930,12},
{954,12},
{964,12},
{982,12},
{985,12},
{991,12},
{992,12},
{1067,12},
{1070,12},
{1096,12},
{1099,12},
{1116,12},
{1143,12},
{1165,12},
{1178,12},
{1184,12},
{1202,12},
{1213,12},
{1221,12},
{1240,12},
{1246,12},
{1252,12},
{1255,12},
{1267,12},
{1293,12},
{1301,12},
{1305,12},
{1332,12},
{1349,12},
{1384,12},
{1392,12},
{1402,12},
{1413,12},
{1417,12},
{1423,12},
{1451,12},
{1480,12},
{1491,12},
{1503,12},
{1504,12},
{1513,12},
{1538,12},
{1544,12},
{1547,12},
{1555,12},
{1574,12},
{1603,12},
{1615,12},
{1618,12},
{1629,12},
{1634,12},
{1636,12},
{1639,12},
{1657,12},
{1667,12},
{1681,12},
{1697,12},
{1704,12},
{1709,12},
{1722,12},
{1730,12},
{1732,12},
{1802,12},
{1804,12},
{1815,12},
{1826,12},
{1832,12},
{1843,12},
{1849,12},
{1863,12},
{1905,12},
{1928,12},
{1933,12},
{1939,12},
{1976,12},
{1996,12},
{2013,12},
{2014,12},
{2020,12},
{13,13},
{19,13},
{26,13},
{41,13},
{50,13},
{55,13},
{69,13},
{70,13},
{79,13},
{82,13},
{87,13},
{93,13},
{94,13},
{97,13},
{100,13},
{112,13},
{121,13},
{134,13},
{138,13},
{148,13},
{151,13},
{157,13},
{161,13},
{179,13},
{181,13},
{188,13},
{196,13},
{203,13},
{206,13},
{223,13},
{224,13},
{227,13},
{230,13},
{239,13},
{241,13},
{248,13},
{253,13},
{268,13},
{274,13},
{283,13},
{286,13},
{289,13},
{301,13},
{302,13},
{316,13},
{319,13},
{324,13},
{331,13},
{333,13},
{345,13},
{351,13},
{358,13},
{375,13},
{379,13},
{381,13},
{386,13},
{403,13},
{405,13},
{419,13},
{426,13},
{428,13},
{439,13},
{440,13},
{446,13},
{451,13},
{454,13},
{458,13},
{465,13},
{468,13},
{472,13},
{475,13},
{477,13},
{496,13},
{502,13},
{508,13},
{517,13},
{521,13},
{527,13},
{530,13},
{532,13},
{542,13},
{552,13},
{555,13},
{560,13},
{566,13},
{575,13},
{577,13},
{589,13},
{590,13},
{602,13},
{607,13},
{608,13},
{611,13},
{613,13},
{625,13},
{644,13},
{651,13},
{654,13},
{656,13},
{662,13},
{668,13},
{681,13},
{682,13},
{689,13},
{696,13},
{699,13},
{707,13},
{709,13},
{714,13},
{716,13},
{719,13},
{727,13},
{734,13},
{738,13},
{743,13},
{747,13},
{757,13},
{769,13},
{770,13},
{776,13},
{790,13},
{799,13},
{805,13},
{809,13},
{812,13},
{820,13},
{827,13},
{829,13},
{835,13},
{841,13},
{844,13},
{856,13},
{859,13},
{862,13},
{865,13},
{885,13},
{890,13},
{905,13},
{916,13},
{925,13},
{935,13},
{939,13},
{942,13},
{949,13},
{953,13},
{956,13},
{961,13},
{968,13},
{976,13},
{988,13},
{995,13},
{997,13},
{1007,13},
{1015,13},
{1016,13},
{1027,13},
{1036,13},
{1039,13},
{1041,13},
{1048,13},
{1053,13},
{1054,13},
{1058,13},
{1075,13},
{1082,13},
{1090,13},
{1109,13},
{1110,13},
{1119,13},
{1126,13},
{1130,13},
{1135,13},
{1137,13},
{1140,13},
{1149,13},
{1156,13},
{1159,13},
{1160,13},
{1165,13},
{1173,13},
{1178,13},
{1183,13},
{1184,13},
{1189,13},
{1194,13},
{1211,13},
{1214,13},
{1216,13},
{1225,13},
{1231,13},
{1239,13},
{1243,13},
{1246,13},
{1249,13},
{1259,13},
{1273,13},
{1274,13},
{1281,13},
{1287,13},
{1294,13},
{1296,13},
{1305,13},
{1306,13},
{1318,13},
{1332,13},
{1335,13},
{1336,13},
{1341,13},
{1342,13},
{1362,13},
{1364,13},
{1368,13},
{1378,13},
{1387,13},
{1389,13},
{1397,13},
{1401,13},
{1408,13},
{1418,13},
{1425,13},
{1426,13},
{1431,13},
{1435,13},
{1441,13},
{1444,13},
{1462,13},
{1471,13},
{1474,13},
{1483,13},
{1485,13},
{1494,13},
{1497,13},
{1516,13},
{1522,13},
{1534,13},
{1543,13},
{1552,13},
{1557,13},
{1558,13},
{1567,13},
{1568,13},
{1574,13},
{1592,13},
{1605,13},
{1606,13},
{1610,13},
{1617,13},
{1623,13},
{1630,13},
{1634,13},
{1640,13},
{1643,13},
{1648,13},
{1651,13},
{1653,13},
{1670,13},
{1676,13},
{1684,13},
{1687,13},
{1691,13},
{1693,13},
{1698,13},
{1709,13},
{1715,13},
{1722,13},
{1732,13},
{1735,13},
{1747,13},
{1749,13},
{1754,13},
{1777,13},
{1784,13},
{1790,13},
{1795,13},
{1801,13},
{1802,13},
{1812,13},
{1828,13},
{1831,13},
{1837,13},
{1838,13},
{1840,13},
{1845,13},
{1863,13},
{1864,13},
{1867,13},
{1870,13},
{1877,13},
{1881,13},
{1884,13},
{1903,13},
{1917,13},
{1918,13},
{1922,13},
{1924,13},
{1928,13},
{1931,13},
{1951,13},
{1952,13},
{1957,13},
{1958,13},
{1964,13},
{1967,13},
{1970,13},
{1972,13},
{1994,13},
{2002,13},
{2007,13},
{2008,13},
{2023,13},
{2030,13},
{2035,13},
{2038,13},
{2042,13},
{2047,13},
{2051,13},
{2058,13},
{2060,13},
{2071,13},
{2084,13},
{2087,13},
{2099,13},
{2108,13},
{2111,13},
{2120,13},
{2128,13},
{2138,13},
{2143,13},
{2144,13},
{2153,13},
{2156,13},
{2162,13},
{2167,13},
{2178,13},
{2183,13},
{2202,13},
{2211,13},
{2214,13},
{2223,13},
{2225,13},
{2232,13},
{2237,13},
{2257,13},
{2260,13},
{2267,13},
{2274,13},
{2276,13},
{2285,13},
{2288,13},
{2293,13},
{2294,13},
{2297,13},
{2303,13},
{2308,13},
{2311,13},
{2318,13},
{2323,13},
{2332,13},
{2341,13},
{2345,13},
{2348,13},
{2354,13},
{2368,13},
{2377,13},
{2380,13},
{2383,13},
{2388,13},
{2395,13},
{2397,13},
{2401,13},
{2411,13},
{2413,13},
{2419,13},
{2435,13},
{2442,13},
{2455,13},
{2472,13},
{2478,13},
{2490,13},
{2507,13},
{2509,13},
{2517,13},
{2524,13},
{2528,13},
{2531,13},
{2538,13},
{2545,13},
{2546,13},
{2555,13},
{2557,13},
{2564,13},
{2573,13},
{2579,13},
{2592,13},
{2598,13},
{2607,13},
{2612,13},
{2619,13},
{2621,13},
{2627,13},
{2633,13},
{2636,13},
{2642,13},
{2654,13},
{2660,13},
{2669,13},
{2675,13},
{2684,13},
{2694,13},
{2703,13},
{2706,13},
{2712,13},
{2715,13},
{2722,13},
{2727,13},
{2734,13},
{2742,13},
{2745,13},
{2751,13},
{2766,13},
{2768,13},
{2780,13},
{2790,13},
{2794,13},
{2796,13},
{2801,13},
{2804,13},
{2807,13},
{2816,13},
{2821,13},
{2831,13},
{2834,13},
{2839,13},
{2845,13},
{2852,13},
{2856,13},
{2861,13},
{2873,13},
{2874,13},
{2888,13},
{2893,13},
{2894,13},
{2902,13},
{2917,13},
{2921,13},
{2922,13},
{2929,13},
{2935,13},
{2946,13},
{2951,13},
{2957,13},
{2960,13},
{2966,13},
{2972,13},
{2976,13},
{2979,13},
{2985,13},
{3000,13},
{3003,13},
{3013,13},
{3018,13},
{3020,13},
{3025,13},
{3042,13},
{3047,13},
{3048,13},
{3051,13},
{3054,13},
{3056,13},
{3065,13},
{3073,13},
{3074,13},
{3083,13},
{3086,13},
{3091,13},
{3097,13},
{3109,13},
{3116,13},
{3124,13},
{3128,13},
{3153,13},
{3160,13},
{3165,13},
{3172,13},
{3175,13},
{3184,13},
{3193,13},
{3196,13},
{3200,13},
{3203,13},
{3205,13},
{3209,13},
{3224,13},
{3239,13},
{3251,13},
{3254,13},
{3265,13},
{3266,13},
{3275,13},
{3280,13},
{3283,13},
{3286,13},
{3301,13},
{3302,13},
{3305,13},
{3319,13},
{3323,13},
{3326,13},
{3331,13},
{3348,13},
{3351,13},
{3358,13},
{3368,13},
{3374,13},
{3376,13},
{3379,13},
{3385,13},
{3386,13},
{3396,13},
{3420,13},
{3423,13},
{3430,13},
{3433,13},
{3434,13},
{3439,13},
{3442,13},
{3444,13},
{3453,13},
{3464,13},
{3477,13},
{3478,13},
{3482,13},
{3487,13},
{3497,13},
{3500,13},
{3505,13},
{3506,13},
{3511,13},
{3512,13},
{3515,13},
{3525,13},
{3532,13},
{3538,13},
{3540,13},
{3547,13},
{3549,13},
{3560,13},
{3571,13},
{3577,13},
{3583,13},
{3590,13},
{3593,13},
{3594,13},
{3599,13},
{3601,13},
{3602,13},
{3613,13},
{3623,13},
{3630,13},
{3638,13},
{3649,13},
{3655,13},
{3662,13},
{3667,13},
{3669,13},
{3676,13},
{3683,13},
{3700,13},
{3709,13},
{3710,13},
{3713,13},
{3723,13},
{3725,13},
{3728,13},
{3734,13},
{3737,13},
{3738,13},
{3744,13},
{3750,13},
{3762,13},
{3764,13},
{3774,13},
{3776,13},
{3786,13},
{3800,13},
{3803,13},
{3809,13},
{3816,13},
{3821,13},
{3827,13},
{3829,13},
{3836,13},
{3842,13},
{3844,13},
{3847,13},
{3853,13},
{3861,13},
{3871,13},
{3872,13},
{3881,13},
{3890,13},
{3892,13},
{3909,13},
{3921,13},
{3934,13},
{3938,13},
{3947,13},
{3950,13},
{3952,13},
{3964,13},
{3974,13},
{3980,13},
{3983,13},
{3986,13},
{3995,13},
{3998,13},
{4001,13},
{4002,13},
{4004,13},
{4008,13},
{4011,13},
{4016,13},
{4033,13},
{4036,13},
{4040,13},
{4053,13},
{4058,13},
{4081,13},
{4091,13},
{4094,13},
{21,14},
{28,14},
{41,14},
{47,14},
{61,14},
{84,14},
{87,14},
{93,14},
{94,14},
{103,14},
{117,14},
{121,14},
{134,14},
{137,14},
{157,14},
{161,14},
{205,14},
{206,14},
{211,14},
{214,14},
{218,14},
{234,14},
{236,14},
{248,14},
{262,14},
{299,14},
{304,14},
{319,14},
{322,14},
{334,14},
{355,14},
{357,14},
{358,14},
{369,14},
{372,14},
{375,14},
{388,14},
{400,14},
{415,14},
{446,14},
{451,14},
{458,14},
{471,14},
{484,14},
{501,14},
{502,14},
{517,14},
{545,14},
{569,14},
{617,14},
{618,14},
{623,14},
{625,14},
{637,14},
{661,14},
{668,14},
{684,14},
{695,14},
{716,14},
{719,14},
{722,14},
{731,14},
{738,14},
{747,14},
{755,14},
{761,14},
{767,14},
{775,14},
{782,14},
{787,14},
{794,14},
{803,14},
{812,14},
{817,14},
{824,14},
{829,14},
{850,14},
{866,14},
{871,14},
{877,14},
{920,14},
{935,14},
{959,14},
{979,14},
{992,14},
{1010,14},
{1012,14},
{1015,14},
{1033,14},
{1036,14},
{1053,14},
{1057,14},
{1069,14},
{1072,14},
{1075,14},
{1087,14},
{1089,14},
{1137,14},
{1166,14},
{1174,14},
{1180,14},
{1204,14},
{1211,14},
{1219,14},
{1236,14},
{1255,14},
{1264,14},
{1306,14},
{1330,14},
{1341,14},
{1344,14},
{1347,14},
{1349,14},
{1361,14},
{1380,14},
{1390,14},
{1404,14},
{1435,14},
{1444,14},
{1453,14},
{1461,14},
{1462,14},
{1465,14},
{1468,14},
{1474,14},
{1483,14},
{1488,14},
{1493,14},
{1500,14},
{1509,14},
{1510,14},
{1514,14},
{1519,14},
{1528,14},
{1533,14},
{1540,14},
{1550,14},
{1567,14},
{1571,14},
{1573,14},
{1578,14},
{1598,14},
{1606,14},
{1618,14},
{1630,14},
{1634,14},
{1640,14},
{1643,14},
{1654,14},
{1679,14},
{1688,14},
{1698,14},
{1703,14},
{1704,14},
{1722,14},
{1735,14},
{1750,14},
{1753,14},
{1760,14},
{1789,14},
{1792,14},
{1802,14},
{1819,14},
{1825,14},
{1828,14},
{1832,14},
{1845,14},
{1846,14},
{1857,14},
{1869,14},
{1897,14},
{1906,14},
{1908,14},
{1911,14},
{1934,14},
{1962,14},
{1967,14},
{1972,14},
{1975,14},
{1999,14},
{2004,14},
{2011,14},
{2013,14},
{2037,14},
{2051,14},
{2063,14},
{2066,14},
{2094,14},
{2128,14},
{2154,14},
{2164,14},
{2198,14},
{2217,14},
{2220,14},
{2223,14},
{2238,14},
{2245,14},
{2252,14},
{2258,14},
{2264,14},
{2280,14},
{2285,14},
{2293,14},
{2294,14},
{2298,14},
{2303,14},
{2306,14},
{2311,14},
{2326,14},
{2354,14},
{2373,14},
{2380,14},
{2385,14},
{2392,14},
{2401,14},
{2402,14},
{2408,14},
{2419,14},
{2450,14},
{2452,14},
{2477,14},
{2509,14},
{2510,14},
{2515,14},
{2524,14},
{2527,14},
{2531,14},
{2552,14},
{2561,14},
{2567,14},
{2571,14},
{2586,14},
{2588,14},
{2595,14},
{2607,14},
{2621,14},
{2630,14},
{2639,14},
{2653,14},
{2670,14},
{2672,14},
{2700,14},
{2711,14},
{2715,14},
{2748,14},
{2751,14},
{2753,14},
{2754,14},
{2760,14},
{2774,14},
{2784,14},
{2793,14},
{2804,14},
{2811,14},
{2822,14},
{2826,14},
{2836,14},
{2839,14},
{2840,14},
{2893,14},
{2901,14},
{2902,14},
{2905,14},
{2912,14},
{2915,14},
{2918,14},
{2939,14},
{2965,14},
{2966,14},
{2975,14},
{2988,14},
{2993,14},
{3006,14},
{3017,14},
{3031,14},
{3038,14},
{3041,14},
{3042,14},
{3051,14},
{3073,14},
{3088,14},
{3097,14},
{3098,14},
{3103,14},
{3104,14},
{3146,14},
{3148,14},
{3153,14},
{3159,14},
{3182,14},
{3187,14},
{3189,14},
{3199,14},
{3239,14},
{3263,14},
{3271,14},
{3275,14},
{3278,14},
{3280,14},
{3283,14},
{3290,14},
{3311,14},
{3316,14},
{3343,14},
{3346,14},
{3357,14},
{3358,14},
{3361,14},
{3362,14},
{3364,14},
{3386,14},
{3418,14},
{3424,14},
{3433,14},
{3434,14},
{3436,14},
{3463,14},
{3467,14},
{3477,14},
{3484,14},
{3505,14},
{3508,14},
{3515,14},
{3532,14},
{3553,14},
{3554,14},
{3568,14},
{3573,14},
{3587,14},
{3589,14},
{3596,14},
{3608,14},
{3620,14},
{3630,14},
{3644,14},
{3649,14},
{3664,14},
{3679,14},
{3680,14},
{3685,14},
{3686,14},
{3698,14},
{3714,14},
{3726,14},
{3737,14},
{3767,14},
{3782,14},
{3786,14},
{3793,14},
{3796,14},
{3805,14},
{3815,14},
{3841,14},
{3847,14},
{3853,14},
{3862,14},
{3875,14},
{3902,14},
{3904,14},
{3916,14},
{3947,14},
{3949,14},
{3955,14},
{3962,14},
{3971,14},
{3980,14},
{3985,14},
{3998,14},
{4001,14},
{4002,14},
{4016,14},
{4021,14},
{4026,14},
{4043,14},
{4079,14},
{4102,14},
{4106,14},
{4119,14},
{4126,14},
{4147,14},
{4149,14},
{4164,14},
{4174,14},
{4181,14},
{4185,14},
{4188,14},
{4202,14},
{4228,14},
{4232,14},
{4246,14},
{4252,14},
{4256,14},
{4286,14},
{4303,14},
{4306,14},
{4311,14},
{4317,14},
{4342,14},
{4346,14},
{4377,14},
{4401,14},
{4407,14},
{4414,14},
{4422,14},
{4431,14},
{4434,14},
{4436,14},
{4443,14},
{4459,14},
{4461,14},
{4462,14},
{4473,14},
{4497,14},
{4504,14},
{4507,14},
{4525,14},
{4534,14},
{4538,14},
{4548,14},
{4552,14},
{4560,14},
{4575,14},
{4599,14},
{4612,14},
{4619,14},
{4640,14},
{4643,14},
{4677,14},
{4687,14},
{4723,14},
{4730,14},
{4736,14},
{4741,14},
{4763,14},
{4765,14},
{4770,14},
{4781,14},
{4808,14},
{4822,14},
{4828,14},
{4831,14},
{4842,14},
{4855,14},
{4859,14},
{4867,14},
{4870,14},
{4881,14},
{4893,14},
{4910,14},
{4917,14},
{4929,14},
{4939,14},
{4947,14},
{4949,14},
{4954,14},
{4972,14},
{4975,14},
{5000,14},
{5005,14},
{5029,14},
{5039,14},
{5044,14},
{5051,14},
{5056,14},
{5073,14},
{5096,14},
{5128,14},
{5134,14},
{5161,14},
{5179,14},
{5193,14},
{5199,14},
{5202,14},
{5204,14},
{5218,14},
{5247,14},
{5260,14},
{5271,14},
{5301,14},
{5305,14},
{5319,14},
{5326,14},
{5328,14},
{5333,14},
{5364,14},
{5376,14},
{5399,14},
{5416,14},
{5421,14},
{5427,14},
{5429,14},
{5430,14},
{5434,14},
{5441,14},
{5451,14},
{5465,14},
{5466,14},
{5471,14},
{5477,14},
{5492,14},
{5495,14},
{5505,14},
{5515,14},
{5525,14},
{5529,14},
{5532,14},
{5539,14},
{5541,14},
{5556,14},
{5566,14},
{5568,14},
{5574,14},
{5595,14},
{5602,14},
{5611,14},
{5616,14},
{5622,14},
{5628,14},
{5655,14},
{5662,14},
{5675,14},
{5689,14},
{5722,14},
{5724,14},
{5728,14},
{5731,14},
{5746,14},
{5764,14},
{5771,14},
{5781,14},
{5801,14},
{5809,14},
{5810,14},
{5812,14},
{5841,14},
{5848,14},
{5853,14},
{5854,14},
{5858,14},
{5892,14},
{5907,14},
{5910,14},
{5913,14},
{5920,14},
{5929,14},
{5949,14},
{5952,14},
{5955,14},
{5962,14},
{5975,14},
{5985,14},
{5997,14},
{5998,14},
{6012,14},
{6016,14},
{6026,14},
{6036,14},
{6040,14},
{6045,14},
{6055,14},
{6059,14},
{6088,14},
{6115,14},
{6124,14},
{6127,14},
{6132,14},
{6146,14},
{6158,14},
{6169,14},
{6206,14},
{6228,14},
{6237,14},
{6244,14},
{6247,14},
{6256,14},
{6281,14},
{6282,14},
{6284,14},
{6296,14},
{6299,14},
{6302,14},
{6325,14},
{6349,14},
{6352,14},
{6362,14},
{6383,14},
{6386,14},
{6395,14},
{6397,14},
{6415,14},
{6424,14},
{6429,14},
{6439,14},
{6451,14},
{6489,14},
{6496,14},
{6502,14},
{6511,14},
{6514,14},
{6520,14},
{6523,14},
{6529,14},
{6532,14},
{6547,14},
{6549,14},
{6598,14},
{6601,14},
{6610,14},
{6622,14},
{6632,14},
{6655,14},
{6665,14},
{6666,14},
{6695,14},
{6701,14},
{6709,14},
{6710,14},
{6741,14},
{6745,14},
{6758,14},
{6767,14},
{6772,14},
{6782,14},
{6797,14},
{6800,14},
{6843,14},
{6845,14},
{6860,14},
{6865,14},
{6878,14},
{6887,14},
{6888,14},
{6901,14},
{6906,14},
{6940,14},
{6947,14},
{6953,14},
{6954,14},
{6959,14},
{6961,14},
{6964,14},
{6991,14},
{6993,14},
{6999,14},
{7016,14},
{7029,14},
{7036,14},
{7045,14},
{7076,14},
{7083,14},
{7094,14},
{7097,14},
{7123,14},
{7130,14},
{7139,14},
{7145,14},
{7146,14},
{7178,14},
{7186,14},
{7192,14},
{7198,14},
{7222,14},
{7269,14},
{7270,14},
{7276,14},
{7287,14},
{7307,14},
{7315,14},
{7334,14},
{7340,14},
{7351,14},
{7352,14},
{7357,14},
{7360,14},
{7363,14},
{7384,14},
{7396,14},
{7403,14},
{7406,14},
{7425,14},
{7437,14},
{7445,14},
{7450,14},
{7455,14},
{7461,14},
{7466,14},
{7488,14},
{7494,14},
{7515,14},
{7517,14},
{7521,14},
{7536,14},
{7546,14},
{7569,14},
{7591,14},
{7592,14},
{7598,14},
{7612,14},
{7623,14},
{7632,14},
{7637,14},
{7644,14},
{7657,14},
{7665,14},
{7672,14},
{7682,14},
{7699,14},
{7702,14},
{7724,14},
{7749,14},
{7753,14},
{7754,14},
{7761,14},
{7771,14},
{7777,14},
{7784,14},
{7804,14},
{7807,14},
{7808,14},
{7818,14},
{7835,14},
{7842,14},
{7865,14},
{7868,14},
{7880,14},
{7883,14},
{7891,14},
{7897,14},
{7907,14},
{7910,14},
{7924,14},
{7933,14},
{7934,14},
{7942,14},
{7948,14},
{7959,14},
{7984,14},
{7994,14},
{7999,14},
{8014,14},
{8021,14},
{8041,14},
{8049,14},
{8050,14},
{8068,14},
{8080,14},
{8095,14},
{8102,14},
{8106,14},
{8120,14},
{8133,14},
{8134,14},
{8143,14},
{8162,14},
{8168,14},
{8179,14},
{1,15},
{8,15},
{11,15},
{22,15},
{26,15},
{47,15},
{59,15},
{64,15},
{67,15},
{73,15},
{82,15},
{97,15},
{103,15},
{110,15},
{115,15},
{122,15},
{128,15},
{138,15},
{146,15},
{171,15},
{174,15},
{176,15},
{182,15},
{194,15},
{208,15},
{211,15},
{220,15},
{229,15},
{230,15},
{239,15},
{254,15},
{265,15},
{285,15},
{290,15},
{319,15},
{324,15},
{327,15},
{333,15},
{357,15},
{364,15},
{395,15},
{397,15},
{405,15},
{409,15},
{419,15},
{422,15},
{431,15},
{433,15},
{436,15},
{440,15},
{453,15},
{460,15},
{471,15},
{478,15},
{482,15},
{488,15},
{524,15},
{529,15},
{535,15},
{536,15},
{539,15},
{563,15},
{566,15},
{572,15},
{577,15},
{587,15},
{592,15},
{602,15},
{623,15},
{635,15},
{638,15},
{654,15},
{656,15},
{659,15},
{665,15},
{675,15},
{677,15},
{687,15},
{696,15},
{701,15},
{704,15},
{710,15},
{721,15},
{728,15},
{738,15},
{740,15},
{749,15},
{758,15},
{761,15},
{772,15},
{776,15},
{782,15},
{789,15},
{810,15},
{812,15},
{818,15},
{830,15},
{832,15},
{852,15},
{855,15},
{859,15},
{865,15},
{877,15},
{895,15},
{901,15},
{902,15},
{906,15},
{916,15},
{920,15},
{949,15},
{962,15},
{964,15},
{967,15},
{981,15},
{982,15},
{985,15},
{991,15},
{1007,15},
{1016,15},
{1024,15},
{1051,15},
{1060,15},
{1070,15},
{1072,15},
{1084,15},
{1089,15},
{1095,15},
{1114,15},
{1123,15},
{1132,15},
{1154,15},
{1156,15},
{1163,15},
{1171,15},
{1202,15},
{1228,15},
{1239,15},
{1255,15},
{1256,15},
{1262,15},
{1270,15},
{1279,15},
{1308,15},
{1322,15},
{1329,15},
{1330,15},
{1336,15},
{1341,15},
{1347,15},
{1349,15},
{1359,15},
{1367,15},
{1368,15},
{1390,15},
{1413,15},
{1414,15},
{1437,15},
{1441,15},
{1462,15},
{1465,15},
{1480,15},
{1486,15},
{1504,15},
{1509,15},
{1514,15},
{1522,15},
{1528,15},
{1552,15},
{1555,15},
{1571,15},
{1578,15},
{1585,15},
{1588,15},
{1603,15},
{1609,15},
{1617,15},
{1620,15},
{1629,15},
{1636,15},
{1648,15},
{1667,15},
{1669,15},
{1682,15},
{1697,15},
{1704,15},
{1709,15},
{1727,15},
{1730,15},
{1732,15},
{1741,15},
{1744,15},
{1759,15},
{1765,15},
{1766,15},
{1778,15},
{1780,15},
{1783,15},
{1797,15},
{1807,15},
{1821,15},
{1832,15},
{1835,15},
{1849,15},
{1850,15},
{1863,15},
{1867,15},
{1869,15},
{1872,15},
{1887,15},
{1888,15},
{1897,15},
{1906,15},
{1917,15},
{1927,15},
{1939,15},
{1941,15},
{1948,15},
{1970,15},
{1979,15},
{1982,15},
{2002,15},
{2020,15},
{2024,15},
{2032,15},
{2053,15},
{2060,15},
{2063,15},
{2066,15},
{2075,15},
{2078,15},
{2081,15},
{2091,15},
{2096,15},
{2102,15},
{2106,15},
{2116,15},
{2120,15},
{2125,15},
{2134,15},
{2178,15},
{2180,15},
{2187,15},
{2189,15},
{2190,15},
{2208,15},
{2214,15},
{2237,15},
{2252,15},
{2257,15},
{2260,15},
{2264,15},
{2270,15},
{2279,15},
{2288,15},
{2305,15},
{2312,15},
{2317,15},
{2323,15},
{2329,15},
{2335,15},
{2342,15},
{2345,15},
{2365,15},
{2371,15},
{2378,15},
{2385,15},
{2395,15},
{2404,15},
{2414,15},
{2426,15},
{2428,15},
{2441,15},
{2456,15},
{2466,15},
{2468,15},
{2475,15},
{2489,15},
{2495,15},
{2497,15},
{2510,15},
{2512,15},
{2522,15},
{2533,15},
{2543,15},
{2551,15},
{2552,15},
{2557,15},
{2567,15},
{2581,15},
{2586,15},
{2597,15},
{2601,15},
{2622,15},
{2633,15},
{2636,15},
{2642,15},
{2644,15},
{2653,15},
{2667,15},
{2669,15},
{2672,15},
{2675,15},
{2682,15},
{2687,15},
{2691,15},
{2698,15},
{2708,15},
{2712,15},
{2718,15},
{2722,15},
{2736,15},
{2741,15},
{2756,15},
{2765,15},
{2774,15},
{2799,15},
{2804,15},
{2825,15},
{2826,15},
{2840,15},
{2843,15},
{2846,15},
{2849,15},
{2867,15},
{2876,15},
{2891,15},
{2902,15},
{2912,15},
{2917,15},
{2927,15},
{2941,15},
{2965,15},
{2970,15},
{2982,15},
{2993,15},
{3018,15},
{3023,15},
{3025,15},
{3026,15},
{3028,15},
{3032,15},
{3053,15},
{3054,15},
{3065,15},
{3071,15},
{3076,15},
{3088,15},
{3107,15},
{3146,15},
{3148,15},
{3159,15},
{3165,15},
{3170,15},
{3179,15},
{3182,15},
{3205,15},
{3212,15},
{3218,15},
{3220,15},
{3223,15},
{3227,15},
{3233,15},
{3234,15},
{3254,15},
{3263,15},
{3268,15},
{3272,15},
{3277,15},
{3292,15},
{3295,15},
{3296,15},
{3301,15},
{3306,15},
{3313,15},
{3346,15},
{3367,15},
{3371,15},
{3373,15},
{3374,15},
{3376,15},
{3382,15},
{3388,15},
{3391,15},
{3403,15},
{3406,15},
{3413,15},
{3420,15},
{3427,15},
{3441,15},
{3453,15},
{3464,15},
{3469,15},
{3481,15},
{3488,15},
{3497,15},
{3503,15},
{3511,15},
{3515,15},
{3525,15},
{3529,15},
{3547,15},
{3550,15},
{3573,15},
{3583,15},
{3594,15},
{3607,15},
{3613,15},
{3624,15},
{3630,15},
{3635,15},
{3642,15},
{3644,15},
{3650,15},
{3679,15},
{3690,15},
{3698,15},
{3704,15},
{3707,15},
{3713,15},
{3754,15},
{3756,15},
{3761,15},
{3776,15},
{3781,15},
{3788,15},
{3791,15},
{3794,15},
{3806,15},
{3841,15},
{3848,15},
{3851,15},
{3856,15},
{3868,15},
{3875,15},
{3882,15},
{3884,15},
{3889,15},
{3892,15},
{3919,15},
{3921,15},
{3958,15},
{3961,15},
{3973,15},
{3977,15},
{3985,15},
{3991,15},
{4004,15},
{4007,15},
{4019,15},
{4045,15},
{4054,15},
{4057,15},
{4058,15},
{4070,15},
{4101,15},
{4113,15},
{4114,15},
{4119,15},
{4129,15},
{4141,15},
{4142,15},
{4147,15},
{4149,15},
{4150,15},
{4164,15},
{4168,15},
{4186,15},
{4198,15},
{4207,15},
{4221,15},
{4225,15},
{4231,15},
{4238,15},
{4243,15},
{4249,15},
{4250,15},
{4252,15},
{4259,15},
{4279,15},
{4285,15},
{4288,15},
{4303,15},
{4312,15},
{4322,15},
{4327,15},
{4336,15},
{4359,15},
{4384,15},
{4387,15},
{4401,15},
{4407,15},
{4428,15},
{4436,15},
{4450,15},
{4452,15},
{4459,15},
{4461,15},
{4470,15},
{4483,15},
{4485,15},
{4486,15},
{4492,15},
{4497,15},
{4514,15},
{4533,15},
{4537,15},
{4546,15},
{4551,15},
{4555,15},
{4560,15},
{4569,15},
{4576,15},
{4582,15},
{4586,15},
{4609,15},
{4610,15},
{4612,15},
{4649,15},
{4652,15},
{4672,15},
{4677,15},
{4684,15},
{4690,15},
{4695,15},
{4696,15},
{4702,15},
{4705,15},
{4717,15},
{4726,15},
{4736,15},
{4753,15},
{4754,15},
{4756,15},
{4775,15},
{4801,15},
{4819,15},
{4828,15},
{4838,15},
{4852,15},
{4856,15},
{4873,15},
{4887,15},
{4891,15},
{4904,15},
{4912,15},
{4921,15},
{4936,15},
{4941,15},
{4942,15},
{4963,15},
{4984,15},
{4990,15},
{5005,15},
{5013,15},
{5020,15},
{5039,15},
{5048,15},
{5062,15},
{5080,15},
{5085,15},
{5086,15},
{5095,15},
{5096,15},
{5102,15},
{5107,15},
{5141,15},
{5145,15},
{5148,15},
{5157,15},
{5158,15},
{5162,15},
{5172,15},
{5182,15},
{5184,15},
{5193,15},
{5199,15},
{5201,15},
{5204,15},
{5211,15},
{5223,15},
{5230,15},
{5232,15},
{5253,15},
{5257,15},
{5260,15},
{5284,15},
{5306,15},
{5331,15},
{5334,15},
{5364,15},
{5367,15},
{5371,15},
{5382,15},
{5386,15},
{5399,15},
{5400,15},
{5409,15},
{5415,15},
{5416,15},
{5424,15},
{5436,15},
{5454,15},
{5462,15},
{5468,15},
{5481,15},
{5505,15},
{5511,15},
{5518,15},
{5530,15},
{5532,15},
{5539,15},
{5553,15},
{5573,15},
{5580,15},
{5597,15},
{5602,15},
{5608,15},
{5611,15},
{5613,15},
{5625,15},
{5632,15},
{5635,15},
{5638,15},
{5652,15},
{5659,15},
{5677,15},
{5686,15},
{5689,15},
{5698,15},
{5703,15},
{5707,15},
{5731,15},
{5738,15},
{5743,15},
{5748,15},
{5758,15},
{5762,15},
{5768,15},
{5773,15},
{5776,15},
{5815,15},
{5841,15},
{5847,15},
{5860,15},
{5870,15},
{5875,15},
{5877,15},
{5884,15},
{5892,15},
{5902,15},
{5910,15},
{5916,15},
{5919,15},
{5935,15},
{5937,15},
{5944,15},
{5947,15},
{5958,15},
{5962,15},
{5969,15},
{5981,15},
{5995,15},
{5998,15},
{6003,15},
{6010,15},
{6016,15},
{6025,15},
{6031,15},
{6036,15},
{6039,15},
{6045,15},
{6049,15},
{6052,15},
{6067,15},
{6074,15},
{6087,15},
{6101,15},
{6121,15},
{6129,15},
{6142,15},
{6151,15},
{6157,15},
{6166,15},
{6170,15},
{6175,15},
{6186,15},
{6203,15},
{6217,15},
{6231,15},
{6241,15},
{6242,15},
{6248,15},
{6256,15},
{6265,15},
{6275,15},
{6277,15},
{6302,15},
{6315,15},
{6318,15},
{6330,15},
{6343,15},
{6347,15},
{6350,15},
{6352,15},
{6371,15},
{6383,15},
{6386,15},
{6405,15},
{6409,15},
{6410,15},
{6433,15},
{6436,15},
{6439,15},
{6463,15},
{6468,15},
{6477,15},
{6496,15},
{6511,15},
{6516,15},
{6519,15},
{6523,15},
{6530,15},
{6539,15},
{6547,15},
{6589,15},
{6592,15},
{6601,15},
{6610,15},
{6616,15},
{6619,15},
{6626,15},
{6635,15},
{6637,15},
{6638,15},
{6652,15},
{6656,15},
{6662,15},
{6689,15},
{6699,15},
{6710,15},
{6714,15},
{6719,15},
{6739,15},
{6751,15},
{6775,15},
{6779,15},
{6788,15},
{6798,15},
{6815,15},
{6819,15},
{6825,15},
{6826,15},
{6836,15},
{6843,15},
{6845,15},
{6858,15},
{6868,15},
{6877,15},
{6881,15},
{6891,15},
{6896,15},
{6899,15},
{6901,15},
{6908,15},
{6914,15},
{6916,15},
{6923,15},
{6925,15},
{6928,15},
{6931,15},
{6934,15},
{6937,15},
{6938,15},
{6949,15},
{6956,15},
{6973,15},
{6976,15},
{6981,15},
{6988,15},
{6999,15},
{7016,15},
{7027,15},
{7029,15},
{7055,15},
{7058,15},
{7074,15},
{7083,15},
{7093,15},
{7100,15},
{7105,15},
{7112,15},
{7118,15},
{7120,15},
{7129,15},
{7166,15},
{7207,15},
{7216,15},
{7226,15},
{7234,15},
{7236,15},
{7246,15},
{7248,15},
{7254,15},
{7263,15},
{7273,15},
{7274,15},
{7293,15},
{7297,15},
{7310,15},
{7315,15},
{7317,15},
{7331,15},
{7338,15},
{7340,15},
{7346,15},
{7355,15},
{7366,15},
{7383,15},
{7389,15},
{7393,15},
{7396,15},
{7400,15},
{7414,15},
{7417,15},
{7426,15},
{7432,15},
{7452,15},
{7468,15},
{7488,15},
{7491,15},
{7494,15},
{7497,15},
{7515,15},
{7531,15},
{7552,15},
{7562,15},
{7564,15},
{7569,15},
{7582,15},
{7585,15},
{7588,15},
{7592,15},
{7597,15},
{7603,15},
{7610,15},
{7624,15},
{7642,15},
{7647,15},
{7653,15},
{7654,15},
{7666,15},
{7668,15},
{7684,15},
{7705,15},
{7732,15},
{7741,15},
{7749,15},
{7750,15},
{7759,15},
{7764,15},
{7777,15},
{7790,15},
{7817,15},
{7826,15},
{7831,15},
{7859,15},
{7871,15},
{7873,15},
{7876,15},
{7900,15},
{7904,15},
{7913,15},
{7916,15},
{7922,15},
{7946,15},
{7953,15},
{7956,15},
{7963,15},
{7979,15},
{7981,15},
{7984,15},
{7989,15},
{7999,15},
{8001,15},
{8021,15},
{8056,15},
{8080,15},
{8083,15},
{8089,15},
{8090,15},
{8114,15},
{8128,15},
{8133,15},
{8145,15},
{8155,15},
{8161,15},
{8182,15},
{8186,15},
{8191,15},
{8192,15},
{8195,15},
{8201,15},
{8207,15},
{8210,15},
{8228,15},
{8249,15},
{8252,15},
{8258,15},
{8267,15},
{8270,15},
{8275,15},
{8284,15},
{8293,15},
{8298,15},
{8305,15},
{8317,15},
{8328,15},
{8336,15},
{8345,15},
{8351,15},
{8367,15},
{8379,15},
{8381,15},
{8382,15},
{8393,15},
{8402,15},
{8414,15},
{8417,15},
{8420,15},
{8429,15},
{8435,15},
{8438,15},
{8450,15},
{8452,15},
{8459,15},
{8470,15},
{8486,15},
{8490,15},
{8500,15},
{8524,15},
{8536,15},
{8552,15},
{8558,15},
{8570,15},
{8576,15},
{8582,15},
{8594,15},
{8606,15},
{8619,15},
{8621,15},
{8624,15},
{8633,15},
{8641,15},
{8653,15},
{8654,15},
{8662,15},
{8675,15},
{8689,15},
{8695,15},
{8702,15},
{8706,15},
{8720,15},
{8729,15},
{8739,15},
{8741,15},
{8751,15},
{8759,15},
{8766,15},
{8777,15},
{8783,15},
{8786,15},
{8795,15},
{8802,15},
{8814,15},
{8821,15},
{8828,15},
{8831,15},
{8837,15},
{8842,15},
{8855,15},
{8856,15},
{8868,15},
{8877,15},
{8890,15},
{8892,15},
{8900,15},
{8909,15},
{8912,15},
{8921,15},
{8922,15},
{8927,15},
{8943,15},
{8948,15},
{8951,15},
{8958,15},
{8984,15},
{8994,15},
{9000,15},
{9013,15},
{9018,15},
{9020,15},
{9031,15},
{9035,15},
{9045,15},
{9052,15},
{9056,15},
{9059,15},
{9066,15},
{9076,15},
{9089,15},
{9129,15},
{9132,15},
{9147,15},
{9164,15},
{9167,15},
{9185,15},
{9195,15},
{9197,15},
{9210,15},
{9217,15},
{9229,15},
{9248,15},
{9254,15},
{9263,15},
{9266,15},
{9268,15},
{9290,15},
{9310,15},
{9316,15},
{9338,15},
{9340,15},
{9343,15},
{9344,15},
{9350,15},
{9354,15},
{9359,15},
{9361,15},
{9364,15},
{9368,15},
{9371,15},
{9373,15},
{9389,15},
{9390,15},
{9409,15},
{9443,15},
{9445,15},
{9446,15},
{9452,15},
{9490,15},
{9492,15},
{9495,15},
{9508,15},
{9523,15},
{9543,15},
{9558,15},
{9567,15},
{9580,15},
{9585,15},
{9591,15},
{9611,15},
{9613,15},
{9614,15},
{9621,15},
{9631,15},
{9642,15},
{9656,15},
{9661,15},
{9667,15},
{9694,15},
{9715,15},
{9722,15},
{9738,15},
{9745,15},
{9758,15},
{9764,15},
{9782,15},
{9791,15},
{9793,15},
{9794,15},
{9805,15},
{9808,15},
{9811,15},
{9817,15},
{9824,15},
{9836,15},
{9851,15},
{9853,15},
{9854,15},
{9877,15},
{9881,15},
{9923,15},
{9935,15},
{9937,15},
{9954,15},
{9959,15},
{9963,15},
{9968,15},
{9973,15},
{9974,15},
{9980,15},
{9983,15},
{9985,15},
{10003,15},
{10010,15},
{10034,15},
{10040,15},
{10063,15},
{10077,15},
{10081,15},
{10082,15},
{10084,15},
{10088,15},
{10091,15},
{10105,15},
{10111,15},
{10118,15},
{10127,15},
{10135,15},
{10169,15},
{10172,15},
{10183,15},
{10190,15},
{10192,15},
{10211,15},
{10218,15},
{10228,15},
{10235,15},
{10242,15},
{10244,15},
{10271,15},
{10278,15},
{10296,15},
{10299,15},
{10307,15},
{10309,15},
{10310,15},
{10314,15},
{10316,15},
{10321,15},
{10328,15},
{10338,15},
{10343,15},
{10344,15},
{10347,15},
{10352,15},
{10364,15},
{10373,15},
{10386,15},
{10391,15},
{10398,15},
{10408,15},
{10413,15},
{10422,15},
{10445,15},
{10460,15},
{10463,15},
{10464,15},
{10474,15},
{10476,15},
{10487,15},
{10494,15},
{10499,15},
{10506,15},
{10513,15},
{10516,15},
{10523,15},
{10539,15},
{10549,15},
{10550,15},
{10567,15},
{10576,15},
{10625,15},
{10635,15},
{10643,15},
{10656,15},
{10671,15},
{10676,15},
{10683,15},
{10685,15},
{10688,15},
{10697,15},
{10700,15},
{10712,15},
{10724,15},
{10728,15},
{10734,15},
{10739,15},
{10762,15},
{10772,15},
{10781,15},
{10800,15},
{10805,15},
{10827,15},
{10830,15},
{10837,15},
{10841,15},
{10847,15},
{10848,15},
{10857,15},
{10866,15},
{10868,15},
{10872,15},
{10887,15},
{10899,15},
{10901,15},
{10915,15},
{10924,15},
{10929,15},
{10942,15},
{10971,15},
{10992,15},
{10995,15},
{11002,15},
{11010,15},
{11027,15},
{11029,15},
{11045,15},
{11057,15},
{11070,15},
{11092,15},
{11099,15},
{11106,15},
{11115,15},
{11120,15},
{11126,15},
{11153,15},
{11190,15},
{11199,15},
{11222,15},
{11225,15},
{11226,15},
{11231,15},
{11244,15},
{11259,15},
{11261,15},
{11270,15},
{11273,15},
{11300,15},
{11307,15},
{11318,15},
{11332,15},
{11335,15},
{11341,15},
{11347,15},
{11354,15},
{11360,15},
{11369,15},
{11372,15},
{11378,15},
{11396,15},
{11405,15},
{11417,15},
{11424,15},
{11427,15},
{11430,15},
{11439,15},
{11442,15},
{11448,15},
{11461,15},
{11468,15},
{11471,15},
{11473,15},
{11476,15},
{11480,15},
{11489,15},
{11499,15},
{11516,15},
{11522,15},
{11531,15},
{11539,15},
{11546,15},
{11551,15},
{11564,15},
{11582,15},
{11589,15},
{11593,15},
{11601,15},
{11608,15},
{11617,15},
{11630,15},
{11663,15},
{11666,15},
{11668,15},
{11677,15},
{11682,15},
{11687,15},
{11696,15},
{11713,15},
{11728,15},
{11747,15},
{11750,15},
{11754,15},
{11759,15},
{11761,15},
{11764,15},
{11767,15},
{11797,15},
{11804,15},
{11808,15},
{11831,15},
{11832,15},
{11849,15},
{11855,15},
{11863,15},
{11880,15},
{11883,15},
{11885,15},
{11898,15},
{11916,15},
{11924,15},
{11928,15},
{11947,15},
{11955,15},
{11961,15},
{11962,15},
{11982,15},
{11990,15},
{12010,15},
{12018,15},
{12027,15},
{12029,15},
{12035,15},
{12055,15},
{12062,15},
{12068,15},
{12071,15},
{12072,15},
{12086,15},
{12097,15},
{12098,15},
{12100,15},
{12112,15},
{12118,15},
{12133,15},
{12134,15},
{12137,15},
{12161,15},
{12162,15},
{12171,15},
{12174,15},
{12185,15},
{12204,15},
{12212,15},
{12215,15},
{12216,15},
{12253,15},
{12260,15},
{12277,15},
{12289,15},
{12295,15},
{12314,15},
{12323,15},
{12325,15},
{12335,15},
{12349,15},
{12358,15},
{12372,15},
{12376,15},
{12379,15},
{12386,15},
{12395,15},
{12416,15},
{12421,15},
{12440,15},
{12452,15},
{12455,15},
{12456,15},
{12462,15},
{12467,15},
{12479,15},
{12505,15},
{12521,15},
{12535,15},
{12547,15},
{12556,15},
{12561,15},
{12568,15},
{12578,15},
{12583,15},
{12595,15},
{12604,15},
{12610,15},
{12621,15},
{12622,15},
{12624,15},
{12629,15},
{12630,15},
{12639,15},
{12640,15},
{12650,15},
{12679,15},
{12680,15},
{12698,15},
{12716,15},
{12721,15},
{12722,15},
{12731,15},
{12742,15},
{12745,15},
{12751,15},
{12759,15},
{12763,15},
{12769,15},
{12781,15},
{12793,15},
{12799,15},
{12815,15},
{12824,15},
{12836,15},
{12845,15},
{12853,15},
{12854,15},
{12857,15},
{12866,15},
{12872,15},
{12875,15},
{12878,15},
{12880,15},
{12885,15},
{12901,15},
{12902,15},
{12920,15},
{12926,15},
{12929,15},
{12939,15},
{12941,15},
{12950,15},
{12953,15},
{12992,15},
{13002,15},
{13010,15},
{13058,15},
{13072,15},
{13084,15},
{13087,15},
{13091,15},
{13097,15},
{13108,15},
{13123,15},
{13149,15},
{13150,15},
{13163,15},
{13166,15},
{13178,15},
{13180,15},
{13184,15},
{13204,15},
{13238,15},
{13242,15},
{13249,15},
{13255,15},
{13269,15},
{13270,15},
{13274,15},
{13285,15},
{13289,15},
{13298,15},
{13307,15},
{13312,15},
{13335,15},
{13345,15},
{13357,15},
{13366,15},
{13372,15},
{13380,15},
{13384,15},
{13395,15},
{13407,15},
{13408,15},
{13413,15},
{13414,15},
{13417,15},
{13437,15},
{13441,15},
{13447,15},
{13456,15},
{13459,15},
{13461,15},
{13466,15},
{13484,15},
{13487,15},
{13489,15},
{13492,15},
{13496,15},
{13510,15},
{13531,15},
{13538,15},
{13543,15},
{13547,15},
{13572,15},
{13581,15},
{13590,15},
{13605,15},
{13612,15},
{13624,15},
{13630,15},
{13632,15},
{13638,15},
{13661,15},
{13665,15},
{13668,15},
{13686,15},
{13699,15},
{13701,15},
{13708,15},
{13716,15},
{13725,15},
{13730,15},
{13742,15},
{13747,15},
{13749,15},
{13753,15},
{13754,15},
{13771,15},
{13773,15},
{13782,15},
{13785,15},
{13798,15},
{13802,15},
{13809,15},
{13828,15},
{13832,15},
{13840,15},
{13850,15},
{13861,15},
{13874,15},
{13876,15},
{13886,15},
{13897,15},
{13900,15},
{13915,15},
{13927,15},
{13951,15},
{13955,15},
{13962,15},
{13969,15},
{13979,15},
{13988,15},
{13998,15},
{14000,15},
{14005,15},
{14027,15},
{14037,15},
{14051,15},
{14054,15},
{14060,15},
{14063,15},
{14071,15},
{14078,15},
{14080,15},
{14085,15},
{14086,15},
{14095,15},
{14138,15},
{14145,15},
{14158,15},
{14166,15},
{14179,15},
{14181,15},
{14188,15},
{14193,15},
{14200,15},
{14203,15},
{14215,15},
{14224,15},
{14230,15},
{14233,15},
{14236,15},
{14246,15},
{14267,15},
{14282,15},
{14287,15},
{14301,15},
{14323,15},
{14325,15},
{14329,15},
{14339,15},
{14342,15},
{14351,15},
{14356,15},
{14359,15},
{14370,15},
{14402,15},
{14411,15},
{14421,15},
{14431,15},
{14435,15},
{14442,15},
{14447,15},
{14456,15},
{14459,15},
{14472,15},
{14477,15},
{14490,15},
{14496,15},
{14501,15},
{14505,15},
{14513,15},
{14520,15},
{14534,15},
{14562,15},
{14576,15},
{14579,15},
{14585,15},
{14586,15},
{14606,15},
{14627,15},
{14630,15},
{14634,15},
{14636,15},
{14647,15},
{14653,15},
{14659,15},
{14671,15},
{14674,15},
{14701,15},
{14716,15},
{14719,15},
{14720,15},
{14725,15},
{14730,15},
{14743,15},
{14747,15},
{14786,15},
{14788,15},
{14792,15},
{14795,15},
{14809,15},
{14831,15},
{14834,15},
{14850,15},
{14855,15},
{14859,15},
{14864,15},
{14876,15},
{14889,15},
{14890,15},
{14898,15},
{14909,15},
{14917,15},
{14924,15},
{14929,15},
{14942,15},
{14951,15},
{14969,15},
{14970,15},
{14972,15},
{14982,15},
{14988,15},
{14994,15},
{15005,15},
{15016,15},
{15024,15},
{15030,15},
{15048,15},
{15054,15},
{15066,15},
{15071,15},
{15072,15},
{15075,15},
{15119,15},
{15121,15},
{15133,15},
{15138,15},
{15143,15},
{15170,15},
{15194,15},
{15212,15},
{15223,15},
{15229,15},
{15254,15},
{15263,15},
{15270,15},
{15273,15},
{15287,15},
{15299,15},
{15301,15},
{15306,15},
{15313,15},
{15320,15},
{15323,15},
{15329,15},
{15332,15},
{15341,15},
{15359,15},
{15361,15},
{15364,15},
{15367,15},
{15379,15},
{15391,15},
{15415,15},
{15416,15},
{15419,15},
{15433,15},
{15469,15},
{15478,15},
{15481,15},
{15482,15},
{15498,15},
{15505,15},
{15517,15},
{15518,15},
{15527,15},
{15528,15},
{15545,15},
{15548,15},
{15554,15},
{15565,15},
{15577,15},
{15580,15},
{15587,15},
{15601,15},
{15604,15},
{15611,15},
{15616,15},
{15619,15},
{15625,15},
{15633,15},
{15674,15},
{15681,15},
{15691,15},
{15693,15},
{15696,15},
{15712,15},
{15717,15},
{15724,15},
{15727,15},
{15730,15},
{15746,15},
{15751,15},
{15760,15},
{15770,15},
{15782,15},
{15791,15},
{15796,15},
{15808,15},
{15814,15},
{15825,15},
{15828,15},
{15835,15},
{15844,15}

}; // end pp


// decode polynomial coefficient arrays from pp
for(int k=0;k<dim;k++) read_prim_pol(k,pp[k][0],pp[k][1]); 

                                 
// initialize the array of direction integers
for(int k=0;k<dim;k++) v[k]=new int32[bits];
for(int j=0;j<bits;j++)v[0][j]=(1L<<(bits-j-1));

if(dim>1)
v[1][0]=(1L<<bits-1);

if(dim>2){
v[2][0]=(1L<<bits-1); 
v[2][1]=(1L<<bits-2); }

if(dim>3){
v[3][0]=(1L<<bits-1); 
v[3][1]=(3L<<bits-2); 
v[3][2]=(7L<<bits-3); }

if(dim>4){
v[4][0]=(1L<<bits-1); 
v[4][1]=(1L<<bits-2); 
v[4][2]=(5L<<bits-3); }

if(dim>5){
v[5][0]=(1L<<bits-1); 
v[5][1]=(3L<<bits-2); 
v[5][2]=(1L<<bits-3); 
v[5][3]=(1L<<bits-4); }

if(dim>6){
v[6][0]=(1L<<bits-1); 
v[6][1]=(1L<<bits-2); 
v[6][2]=(3L<<bits-3); 
v[6][3]=(7L<<bits-4); }

if(dim>7){
v[7][0]=(1L<<bits-1); 
v[7][1]=(3L<<bits-2); 
v[7][2]=(3L<<bits-3); 
v[7][3]=(9L<<bits-4); 
v[7][4]=(9L<<bits-5); }

if(dim>8){
v[8][0]=(1L<<bits-1); 
v[8][1]=(3L<<bits-2); 
v[8][2]=(7L<<bits-3); 
v[8][3]=(7L<<bits-4); 
v[8][4]=(21L<<bits-5); }

if(dim>9){
v[9][0]=(1L<<bits-1); 
v[9][1]=(1L<<bits-2); 
v[9][2]=(5L<<bits-3); 
v[9][3]=(11L<<bits-4); 
v[9][4]=(27L<<bits-5); }

if(dim>10){
v[10][0]=(1L<<bits-1); 
v[10][1]=(1L<<bits-2); 
v[10][2]=(7L<<bits-3); 
v[10][3]=(3L<<bits-4); 
v[10][4]=(29L<<bits-5); }

if(dim>11){
v[11][0]=(1L<<bits-1); 
v[11][1]=(3L<<bits-2); 
v[11][2]=(7L<<bits-3); 
v[11][3]=(13L<<bits-4);
v[11][4]=(3L<<bits-5); }

if(dim>12){
v[12][0]=(1L<<bits-1); 
v[12][1]=(3L<<bits-2); 
v[12][2]=(5L<<bits-3); 
v[12][3]=(1L<<bits-4); 
v[12][4]=(15L<<bits-5); }

if(dim>13){
v[13][0]=(1L<<bits-1); 
v[13][1]=(1L<<bits-2); 
v[13][2]=(1L<<bits-3); 
v[13][3]=(9L<<bits-4); 
v[13][4]=(23L<<bits-5);
v[13][5]=(37L<<bits-6); }

if(dim>14){
v[14][0]=(1L<<bits-1); 
v[14][1]=(1L<<bits-2); 
v[14][2]=(3L<<bits-3); 
v[14][3]=(13L<<bits-4); 
v[14][4]=(11L<<bits-5);
v[14][5]=(7L<<bits-6); }

if(dim>15){
v[15][0]=(1L<<bits-1); 
v[15][1]=(3L<<bits-2); 
v[15][2]=(3L<<bits-3); 
v[15][3]=(5L<<bits-4); 
v[15][4]=(19L<<bits-5);
v[15][5]=(33L<<bits-6); }

if(dim>16){
v[16][0]=(1L<<bits-1); 
v[16][1]=(1L<<bits-2); 
v[16][2]=(7L<<bits-3); 
v[16][3]=(13L<<bits-4); 
v[16][4]=(25L<<bits-5);
v[16][5]=(5L<<bits-6); }

if(dim>17){
v[17][0]=(1L<<bits-1); 
v[17][1]=(1L<<bits-2); 
v[17][2]=(1L<<bits-3); 
v[17][3]=(13L<<bits-4); 
v[17][4]=(15L<<bits-5);
v[17][5]=(39L<<bits-6); }

if(dim>18){
v[18][0]=(1L<<bits-1); 
v[18][1]=(3L<<bits-2); 
v[18][2]=(5L<<bits-3); 
v[18][3]=(11L<<bits-4); 
v[18][4]=(7L<<bits-5);
v[18][5]=(11L<<bits-6); }

if(dim>19){
v[19][0]=(1L<<bits-1); 
v[19][1]=(3L<<bits-2); 
v[19][2]=(1L<<bits-3); 
v[19][3]=(7L<<bits-4); 
v[19][4]=(3L<<bits-5);
v[19][5]=(23L<<bits-6);
v[19][6]=(79L<<bits-7); }

if(dim>20){
v[20][0]=(1L<<bits-1); 
v[20][1]=(3L<<bits-2); 
v[20][2]=(1L<<bits-3); 
v[20][3]=(15L<<bits-4); 
v[20][4]=(17L<<bits-5);
v[20][5]=(63L<<bits-6);
v[20][6]=(13L<<bits-7); }

if(dim>21){
v[21][0]=(1L<<bits-1); 
v[21][1]=(3L<<bits-2); 
v[21][2]=(3L<<bits-3); 
v[21][3]=(3L<<bits-4); 
v[21][4]=(25L<<bits-5);
v[21][5]=(17L<<bits-6);
v[21][6]=(115L<<bits-7); }

if(dim>22){
v[22][0]=(1L<<bits-1); 
v[22][1]=(3L<<bits-2); 
v[22][2]=(7L<<bits-3); 
v[22][3]=(9L<<bits-4); 
v[22][4]=(31L<<bits-5);
v[22][5]=(29L<<bits-6);
v[22][6]=(17L<<bits-7); }

if(dim>23){
v[23][0]=(1L<<bits-1); 
v[23][1]=(1L<<bits-2); 
v[23][2]=(3L<<bits-3); 
v[23][3]=(15L<<bits-4); 
v[23][4]=(29L<<bits-5);
v[23][5]=(15L<<bits-6);
v[23][6]=(41L<<bits-7); }

if(dim>24){
v[24][0]=(1L<<bits-1); 
v[24][1]=(3L<<bits-2); 
v[24][2]=(1L<<bits-3); 
v[24][3]=(9L<<bits-4); 
v[24][4]=(5L<<bits-5);
v[24][5]=(21L<<bits-6);
v[24][6]=(119L<<bits-7); }

if(dim>25){
v[25][0]=(1L<<bits-1); 
v[25][1]=(1L<<bits-2); 
v[25][2]=(5L<<bits-3); 
v[25][3]=(5L<<bits-4); 
v[25][4]=(1L<<bits-5);
v[25][5]=(27L<<bits-6); 
v[25][6]=(33L<<bits-7); }

if(dim>26){
v[26][0]=(1L<<bits-1); 
v[26][1]=(1L<<bits-2); 
v[26][2]=(3L<<bits-3); 
v[26][3]=(1L<<bits-4); 
v[26][4]=(23L<<bits-5);
v[26][5]=(13L<<bits-6);
v[26][6]=(75L<<bits-7); }

if(dim>27){
v[27][0]=(1L<<bits-1); 
v[27][1]=(1L<<bits-2); 
v[27][2]=(7L<<bits-3); 
v[27][3]=(7L<<bits-4); 
v[27][4]=(19L<<bits-5);
v[27][5]=(25L<<bits-6);
v[27][6]=(105L<<bits-7); }

if(dim>28){
v[28][0]=(1L<<bits-1); 
v[28][1]=(3L<<bits-2); 
v[28][2]=(5L<<bits-3); 
v[28][3]=(5L<<bits-4); 
v[28][4]=(21L<<bits-5);
v[28][5]=(9L<<bits-6);
v[28][6]=(7L<<bits-7); }

if(dim>29){
v[29][0]=(1L<<bits-1); 
v[29][1]=(1L<<bits-2); 
v[29][2]=(1L<<bits-3); 
v[29][3]=(15L<<bits-4); 
v[29][4]=(5L<<bits-5);
v[29][5]=(49L<<bits-6);
v[29][6]=(59L<<bits-7); }

if(dim>30){
v[30][0]=(1L<<bits-1); 
v[30][1]=(3L<<bits-2); 
v[30][2]=(5L<<bits-3); 
v[30][3]=(15L<<bits-4); 
v[30][4]=(17L<<bits-5);
v[30][5]=(19L<<bits-6);
v[30][6]=(21L<<bits-7); }

if(dim>31){
v[31][0]=(1L<<bits-1); 
v[31][1]=(1L<<bits-2); 
v[31][2]=(7L<<bits-3); 
v[31][3]=(11L<<bits-4); 
v[31][4]=(13L<<bits-5);
v[31][5]=(29L<<bits-6);
v[31][6]=(3L<<bits-7); }

// random initialization in dimension bigger than 32

for(int k=32;k<dim;k++)
{   
    int degree_k=pp[k][1];
	for(int l=0;l<degree_k;l++)
    {
        Real u=Random::U01();
        int32 f=(1L<<l+1), n=(int)(f*u);
        while(n%2==0){ u=Random::U01(); n=(int)(f*u); }
        
        v[k][l]=(n<<(bits-l-1));
    }
} // end direction integer initialization
     

// computation of direction integer v_kl for k>=degree[k]
for(int k=1;k<dim;k++){
	
	int degree_k=pp[k][1];
    for(int l=degree_k;l<bits;l++)
    {
        int32 n=(v[k][l-degree_k]>>degree_k);
        for(int j=1;j<=degree_k;j++) if(p[k][j]!=0) n=n^v[k][l-j];   
        v[k][l]=n;
	}
} // end for k


// initialize the vector of Sobol integers and Sobol points
index=1;
x_int=new int32[dim];
for(int k=0;k<dim;k++) x_int[k]=v[k][0];

x=new Real[dim];
for(int k=0;k<dim;k++) x[k]=((Real)x_int[k])/N;
    
}// end constructor
    
    
}; // end Sobol


 


MTGL_END_NAMESPACE(Martingale)

#endif

